// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace elegram {

  namespace {

    const ::google::protobuf::Descriptor *RegisterRequest_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection *
        RegisterRequest_reflection_ = NULL;
    const ::google::protobuf::Descriptor *LoginRequest_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection *
        LoginRequest_reflection_ = NULL;
    const ::google::protobuf::Descriptor *AllMyChatsRequest_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection *
        AllMyChatsRequest_reflection_ = NULL;
    const ::google::protobuf::Descriptor *AllMyContactsRequest_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection *
        AllMyContactsRequest_reflection_ = NULL;
    const ::google::protobuf::Descriptor *MessagesRequest_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection *
        MessagesRequest_reflection_ = NULL;
    const ::google::protobuf::Descriptor *MessageToSend_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection *
        MessageToSend_reflection_ = NULL;
    const ::google::protobuf::Descriptor *SendMessageRequest_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection *
        SendMessageRequest_reflection_ = NULL;
    const ::google::protobuf::Descriptor *Request_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection *
        Request_reflection_ = NULL;
    struct RequestOneofInstance {
      const ::elegram::RegisterRequest *register_request_;
      const ::elegram::LoginRequest *login_request_;
      const ::elegram::AllMyChatsRequest *chats_request_;
      const ::elegram::AllMyContactsRequest *contacts_request_;
      const ::elegram::MessagesRequest *messages_request_;
      const ::elegram::SendMessageRequest *send_mesg_request_;
    } *Request_default_oneof_instance_ = NULL;
    const ::google::protobuf::Descriptor *StatusResponse_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection *
        StatusResponse_reflection_ = NULL;
    const ::google::protobuf::EnumDescriptor *StatusResponse_RESULT_descriptor_ = NULL;
    const ::google::protobuf::Descriptor *Chat_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection *
        Chat_reflection_ = NULL;
    const ::google::protobuf::Descriptor *ChatsResponse_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection *
        ChatsResponse_reflection_ = NULL;
    const ::google::protobuf::Descriptor *Contact_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection *
        Contact_reflection_ = NULL;
    const ::google::protobuf::Descriptor *ContactsResponse_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection *
        ContactsResponse_reflection_ = NULL;
    const ::google::protobuf::Descriptor *MessageToRecieve_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection *
        MessageToRecieve_reflection_ = NULL;
    const ::google::protobuf::Descriptor *MessagesResponse_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection *
        MessagesResponse_reflection_ = NULL;
    const ::google::protobuf::Descriptor *Response_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection *
        Response_reflection_ = NULL;
    struct ResponseOneofInstance {
      const ::elegram::StatusResponse *status_response_;
      const ::elegram::ChatsResponse *chats_response_;
      const ::elegram::ContactsResponse *contacts_response_;
      const ::elegram::MessagesResponse *messages_response_;
    } *Response_default_oneof_instance_ = NULL;
    const ::google::protobuf::Descriptor *WrappedMessage_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection *
        WrappedMessage_reflection_ = NULL;
    struct WrappedMessageOneofInstance {
      const ::elegram::Response *response_;
      const ::elegram::Request *request_;
    } *WrappedMessage_default_oneof_instance_ = NULL;
    const ::google::protobuf::Descriptor *LengthPrefix_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection *
        LengthPrefix_reflection_ = NULL;

  }  // namespace


  void protobuf_AssignDesc_messages_2eproto() GOOGLE_ATTRIBUTE_COLD;
  void protobuf_AssignDesc_messages_2eproto() {
      protobuf_AddDesc_messages_2eproto();
      const ::google::protobuf::FileDescriptor *file =
          ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
              "messages.proto");
      GOOGLE_CHECK(file != NULL);
      RegisterRequest_descriptor_ = file->message_type(0);
      static const int RegisterRequest_offsets_[3] = {
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, name_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, email_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, password_),
      };
      RegisterRequest_reflection_ =
          ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
              RegisterRequest_descriptor_,
              RegisterRequest::default_instance_,
              RegisterRequest_offsets_,
              -1,
              -1,
              -1,
              sizeof(RegisterRequest),
              GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, _internal_metadata_),
              GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, _is_default_instance_));
      LoginRequest_descriptor_ = file->message_type(1);
      static const int LoginRequest_offsets_[2] = {
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, name_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, password_),
      };
      LoginRequest_reflection_ =
          ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
              LoginRequest_descriptor_,
              LoginRequest::default_instance_,
              LoginRequest_offsets_,
              -1,
              -1,
              -1,
              sizeof(LoginRequest),
              GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _internal_metadata_),
              GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _is_default_instance_));
      AllMyChatsRequest_descriptor_ = file->message_type(2);
      static const int AllMyChatsRequest_offsets_[1] = {
      };
      AllMyChatsRequest_reflection_ =
          ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
              AllMyChatsRequest_descriptor_,
              AllMyChatsRequest::default_instance_,
              AllMyChatsRequest_offsets_,
              -1,
              -1,
              -1,
              sizeof(AllMyChatsRequest),
              GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllMyChatsRequest, _internal_metadata_),
              GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllMyChatsRequest, _is_default_instance_));
      AllMyContactsRequest_descriptor_ = file->message_type(3);
      static const int AllMyContactsRequest_offsets_[1] = {
      };
      AllMyContactsRequest_reflection_ =
          ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
              AllMyContactsRequest_descriptor_,
              AllMyContactsRequest::default_instance_,
              AllMyContactsRequest_offsets_,
              -1,
              -1,
              -1,
              sizeof(AllMyContactsRequest),
              GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllMyContactsRequest, _internal_metadata_),
              GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllMyContactsRequest,
                                                             _is_default_instance_));
      MessagesRequest_descriptor_ = file->message_type(4);
      static const int MessagesRequest_offsets_[1] = {
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagesRequest, chat_id_),
      };
      MessagesRequest_reflection_ =
          ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
              MessagesRequest_descriptor_,
              MessagesRequest::default_instance_,
              MessagesRequest_offsets_,
              -1,
              -1,
              -1,
              sizeof(MessagesRequest),
              GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagesRequest, _internal_metadata_),
              GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagesRequest, _is_default_instance_));
      MessageToSend_descriptor_ = file->message_type(5);
      static const int MessageToSend_offsets_[2] = {
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToSend, chat_id_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToSend, text_),
      };
      MessageToSend_reflection_ =
          ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
              MessageToSend_descriptor_,
              MessageToSend::default_instance_,
              MessageToSend_offsets_,
              -1,
              -1,
              -1,
              sizeof(MessageToSend),
              GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToSend, _internal_metadata_),
              GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToSend, _is_default_instance_));
      SendMessageRequest_descriptor_ = file->message_type(6);
      static const int SendMessageRequest_offsets_[1] = {
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageRequest, mesg_),
      };
      SendMessageRequest_reflection_ =
          ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
              SendMessageRequest_descriptor_,
              SendMessageRequest::default_instance_,
              SendMessageRequest_offsets_,
              -1,
              -1,
              -1,
              sizeof(SendMessageRequest),
              GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageRequest, _internal_metadata_),
              GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageRequest, _is_default_instance_));
      Request_descriptor_ = file->message_type(7);
      static const int Request_offsets_[7] = {
          PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_,
                                                      register_request_),
          PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, login_request_),
          PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, chats_request_),
          PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_,
                                                      contacts_request_),
          PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_,
                                                      messages_request_),
          PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_,
                                                      send_mesg_request_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, msg_),
      };
      Request_reflection_ =
          ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
              Request_descriptor_,
              Request::default_instance_,
              Request_offsets_,
              -1,
              -1,
              -1,
              Request_default_oneof_instance_,
              GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _oneof_case_[0]),
              sizeof(Request),
              GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
              GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _is_default_instance_));
      StatusResponse_descriptor_ = file->message_type(8);
      static const int StatusResponse_offsets_[1] = {
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, result_),
      };
      StatusResponse_reflection_ =
          ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
              StatusResponse_descriptor_,
              StatusResponse::default_instance_,
              StatusResponse_offsets_,
              -1,
              -1,
              -1,
              sizeof(StatusResponse),
              GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, _internal_metadata_),
              GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, _is_default_instance_));
      StatusResponse_RESULT_descriptor_ = StatusResponse_descriptor_->enum_type(0);
      Chat_descriptor_ = file->message_type(9);
      static const int Chat_offsets_[2] = {
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat, chat_id_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat, title_),
      };
      Chat_reflection_ =
          ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
              Chat_descriptor_,
              Chat::default_instance_,
              Chat_offsets_,
              -1,
              -1,
              -1,
              sizeof(Chat),
              GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat, _internal_metadata_),
              GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat, _is_default_instance_));
      ChatsResponse_descriptor_ = file->message_type(10);
      static const int ChatsResponse_offsets_[1] = {
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatsResponse, chats_),
      };
      ChatsResponse_reflection_ =
          ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
              ChatsResponse_descriptor_,
              ChatsResponse::default_instance_,
              ChatsResponse_offsets_,
              -1,
              -1,
              -1,
              sizeof(ChatsResponse),
              GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatsResponse, _internal_metadata_),
              GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatsResponse, _is_default_instance_));
      Contact_descriptor_ = file->message_type(11);
      static const int Contact_offsets_[2] = {
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, name_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, email_),
      };
      Contact_reflection_ =
          ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
              Contact_descriptor_,
              Contact::default_instance_,
              Contact_offsets_,
              -1,
              -1,
              -1,
              sizeof(Contact),
              GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, _internal_metadata_),
              GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, _is_default_instance_));
      ContactsResponse_descriptor_ = file->message_type(12);
      static const int ContactsResponse_offsets_[1] = {
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactsResponse, contacts_),
      };
      ContactsResponse_reflection_ =
          ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
              ContactsResponse_descriptor_,
              ContactsResponse::default_instance_,
              ContactsResponse_offsets_,
              -1,
              -1,
              -1,
              sizeof(ContactsResponse),
              GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactsResponse, _internal_metadata_),
              GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactsResponse, _is_default_instance_));
      MessageToRecieve_descriptor_ = file->message_type(13);
      static const int MessageToRecieve_offsets_[3] = {
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToRecieve, sender_id_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToRecieve, chat_id_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToRecieve, text_),
      };
      MessageToRecieve_reflection_ =
          ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
              MessageToRecieve_descriptor_,
              MessageToRecieve::default_instance_,
              MessageToRecieve_offsets_,
              -1,
              -1,
              -1,
              sizeof(MessageToRecieve),
              GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToRecieve, _internal_metadata_),
              GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToRecieve, _is_default_instance_));
      MessagesResponse_descriptor_ = file->message_type(14);
      static const int MessagesResponse_offsets_[1] = {
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagesResponse, messages_),
      };
      MessagesResponse_reflection_ =
          ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
              MessagesResponse_descriptor_,
              MessagesResponse::default_instance_,
              MessagesResponse_offsets_,
              -1,
              -1,
              -1,
              sizeof(MessagesResponse),
              GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagesResponse, _internal_metadata_),
              GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagesResponse, _is_default_instance_));
      Response_descriptor_ = file->message_type(15);
      static const int Response_offsets_[5] = {
          PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_,
                                                      status_response_),
          PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, chats_response_),
          PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_,
                                                      contacts_response_),
          PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_,
                                                      messages_response_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, msg_),
      };
      Response_reflection_ =
          ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
              Response_descriptor_,
              Response::default_instance_,
              Response_offsets_,
              -1,
              -1,
              -1,
              Response_default_oneof_instance_,
              GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _oneof_case_[0]),
              sizeof(Response),
              GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
              GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _is_default_instance_));
      WrappedMessage_descriptor_ = file->message_type(16);
      static const int WrappedMessage_offsets_[3] = {
          PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(WrappedMessage_default_oneof_instance_, response_),
          PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(WrappedMessage_default_oneof_instance_, request_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrappedMessage, msg_),
      };
      WrappedMessage_reflection_ =
          ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
              WrappedMessage_descriptor_,
              WrappedMessage::default_instance_,
              WrappedMessage_offsets_,
              -1,
              -1,
              -1,
              WrappedMessage_default_oneof_instance_,
              GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrappedMessage, _oneof_case_[0]),
              sizeof(WrappedMessage),
              GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrappedMessage, _internal_metadata_),
              GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrappedMessage, _is_default_instance_));
      LengthPrefix_descriptor_ = file->message_type(17);
      static const int LengthPrefix_offsets_[1] = {
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LengthPrefix, length_),
      };
      LengthPrefix_reflection_ =
          ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
              LengthPrefix_descriptor_,
              LengthPrefix::default_instance_,
              LengthPrefix_offsets_,
              -1,
              -1,
              -1,
              sizeof(LengthPrefix),
              GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LengthPrefix, _internal_metadata_),
              GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LengthPrefix, _is_default_instance_));
  }

  namespace {

    GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
    inline void protobuf_AssignDescriptorsOnce() {
        ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                                           &protobuf_AssignDesc_messages_2eproto);
    }

    void protobuf_RegisterTypes(const ::std::string &) GOOGLE_ATTRIBUTE_COLD;
    void protobuf_RegisterTypes(const ::std::string &) {
        protobuf_AssignDescriptorsOnce();
        ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
            RegisterRequest_descriptor_, &RegisterRequest::default_instance());
        ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
            LoginRequest_descriptor_, &LoginRequest::default_instance());
        ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
            AllMyChatsRequest_descriptor_, &AllMyChatsRequest::default_instance());
        ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
            AllMyContactsRequest_descriptor_, &AllMyContactsRequest::default_instance());
        ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
            MessagesRequest_descriptor_, &MessagesRequest::default_instance());
        ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
            MessageToSend_descriptor_, &MessageToSend::default_instance());
        ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
            SendMessageRequest_descriptor_, &SendMessageRequest::default_instance());
        ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
            Request_descriptor_, &Request::default_instance());
        ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
            StatusResponse_descriptor_, &StatusResponse::default_instance());
        ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
            Chat_descriptor_, &Chat::default_instance());
        ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
            ChatsResponse_descriptor_, &ChatsResponse::default_instance());
        ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
            Contact_descriptor_, &Contact::default_instance());
        ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
            ContactsResponse_descriptor_, &ContactsResponse::default_instance());
        ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
            MessageToRecieve_descriptor_, &MessageToRecieve::default_instance());
        ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
            MessagesResponse_descriptor_, &MessagesResponse::default_instance());
        ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
            Response_descriptor_, &Response::default_instance());
        ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
            WrappedMessage_descriptor_, &WrappedMessage::default_instance());
        ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
            LengthPrefix_descriptor_, &LengthPrefix::default_instance());
    }

  }  // namespace

  void protobuf_ShutdownFile_messages_2eproto() {
      delete RegisterRequest::default_instance_;
      delete RegisterRequest_reflection_;
      delete LoginRequest::default_instance_;
      delete LoginRequest_reflection_;
      delete AllMyChatsRequest::default_instance_;
      delete AllMyChatsRequest_reflection_;
      delete AllMyContactsRequest::default_instance_;
      delete AllMyContactsRequest_reflection_;
      delete MessagesRequest::default_instance_;
      delete MessagesRequest_reflection_;
      delete MessageToSend::default_instance_;
      delete MessageToSend_reflection_;
      delete SendMessageRequest::default_instance_;
      delete SendMessageRequest_reflection_;
      delete Request::default_instance_;
      delete Request_default_oneof_instance_;
      delete Request_reflection_;
      delete StatusResponse::default_instance_;
      delete StatusResponse_reflection_;
      delete Chat::default_instance_;
      delete Chat_reflection_;
      delete ChatsResponse::default_instance_;
      delete ChatsResponse_reflection_;
      delete Contact::default_instance_;
      delete Contact_reflection_;
      delete ContactsResponse::default_instance_;
      delete ContactsResponse_reflection_;
      delete MessageToRecieve::default_instance_;
      delete MessageToRecieve_reflection_;
      delete MessagesResponse::default_instance_;
      delete MessagesResponse_reflection_;
      delete Response::default_instance_;
      delete Response_default_oneof_instance_;
      delete Response_reflection_;
      delete WrappedMessage::default_instance_;
      delete WrappedMessage_default_oneof_instance_;
      delete WrappedMessage_reflection_;
      delete LengthPrefix::default_instance_;
      delete LengthPrefix_reflection_;
  }

  void protobuf_AddDesc_messages_2eproto() GOOGLE_ATTRIBUTE_COLD;
  void protobuf_AddDesc_messages_2eproto() {
      static bool already_here = false;
      if (already_here) return;
      already_here = true;
      GOOGLE_PROTOBUF_VERIFY_VERSION;

      ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
          "\n\016messages.proto\022\007elegram\"@\n\017RegisterReq"
          "uest\022\014\n\004name\030\001 \001(\t\022\r\n\005email\030\002 \001(\t\022\020\n\010pas"
          "sword\030\003 \001(\t\".\n\014LoginRequest\022\014\n\004name\030\001 \001("
          "\t\022\020\n\010password\030\002 \001(\t\"\023\n\021AllMyChatsRequest"
          "\"\026\n\024AllMyContactsRequest\"\"\n\017MessagesRequ"
          "est\022\017\n\007chat_id\030\001 \001(\004\".\n\rMessageToSend\022\017\n"
          "\007chat_id\030\001 \001(\004\022\014\n\004text\030\002 \001(\t\":\n\022SendMess"
          "ageRequest\022$\n\004mesg\030\001 \001(\0132\026.elegram.Messa"
          "geToSend\"\326\002\n\007Request\0224\n\020register_request"
          "\030\001 \001(\0132\030.elegram.RegisterRequestH\000\022.\n\rlo"
          "gin_request\030\002 \001(\0132\025.elegram.LoginRequest"
          "H\000\0223\n\rchats_request\030\003 \001(\0132\032.elegram.AllM"
          "yChatsRequestH\000\0229\n\020contacts_request\030\004 \001("
          "\0132\035.elegram.AllMyContactsRequestH\000\0224\n\020me"
          "ssages_request\030\005 \001(\0132\030.elegram.MessagesR"
          "equestH\000\0228\n\021send_mesg_request\030\006 \001(\0132\033.el"
          "egram.SendMessageRequestH\000B\005\n\003msg\"f\n\016Sta"
          "tusResponse\022.\n\006result\030\001 \001(\0162\036.elegram.St"
          "atusResponse.RESULT\"$\n\006RESULT\022\014\n\010ACCEPTE"
          "D\020\000\022\014\n\010REJECTED\020\001\"&\n\004Chat\022\017\n\007chat_id\030\001 \001"
          "(\004\022\r\n\005title\030\002 \001(\t\"-\n\rChatsResponse\022\034\n\005ch"
          "ats\030\001 \003(\0132\r.elegram.Chat\"&\n\007Contact\022\014\n\004n"
          "ame\030\001 \001(\t\022\r\n\005email\030\002 \001(\t\"6\n\020ContactsResp"
          "onse\022\"\n\010contacts\030\001 \003(\0132\020.elegram.Contact"
          "\"D\n\020MessageToRecieve\022\021\n\tsender_id\030\001 \001(\004\022"
          "\017\n\007chat_id\030\002 \001(\004\022\014\n\004text\030\003 \001(\t\"\?\n\020Messag"
          "esResponse\022+\n\010messages\030\001 \003(\0132\031.elegram.M"
          "essageToRecieve\"\347\001\n\010Response\0222\n\017status_r"
          "esponse\030\001 \001(\0132\027.elegram.StatusResponseH\000"
          "\0220\n\016chats_response\030\002 \001(\0132\026.elegram.Chats"
          "ResponseH\000\0226\n\021contacts_response\030\003 \001(\0132\031."
          "elegram.ContactsResponseH\000\0226\n\021messages_r"
          "esponse\030\004 \001(\0132\031.elegram.MessagesResponse"
          "H\000B\005\n\003msg\"c\n\016WrappedMessage\022%\n\010response\030"
          "\001 \001(\0132\021.elegram.ResponseH\000\022#\n\007request\030\002 "
          "\001(\0132\020.elegram.RequestH\000B\005\n\003msg\"\036\n\014Length"
          "Prefix\022\016\n\006length\030\001 \001(\006b\006proto3", 1470);
      ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
          "messages.proto", &protobuf_RegisterTypes);
      RegisterRequest::default_instance_ = new RegisterRequest();
      LoginRequest::default_instance_ = new LoginRequest();
      AllMyChatsRequest::default_instance_ = new AllMyChatsRequest();
      AllMyContactsRequest::default_instance_ = new AllMyContactsRequest();
      MessagesRequest::default_instance_ = new MessagesRequest();
      MessageToSend::default_instance_ = new MessageToSend();
      SendMessageRequest::default_instance_ = new SendMessageRequest();
      Request::default_instance_ = new Request();
      Request_default_oneof_instance_ = new RequestOneofInstance();
      StatusResponse::default_instance_ = new StatusResponse();
      Chat::default_instance_ = new Chat();
      ChatsResponse::default_instance_ = new ChatsResponse();
      Contact::default_instance_ = new Contact();
      ContactsResponse::default_instance_ = new ContactsResponse();
      MessageToRecieve::default_instance_ = new MessageToRecieve();
      MessagesResponse::default_instance_ = new MessagesResponse();
      Response::default_instance_ = new Response();
      Response_default_oneof_instance_ = new ResponseOneofInstance();
      WrappedMessage::default_instance_ = new WrappedMessage();
      WrappedMessage_default_oneof_instance_ = new WrappedMessageOneofInstance();
      LengthPrefix::default_instance_ = new LengthPrefix();
      RegisterRequest::default_instance_->InitAsDefaultInstance();
      LoginRequest::default_instance_->InitAsDefaultInstance();
      AllMyChatsRequest::default_instance_->InitAsDefaultInstance();
      AllMyContactsRequest::default_instance_->InitAsDefaultInstance();
      MessagesRequest::default_instance_->InitAsDefaultInstance();
      MessageToSend::default_instance_->InitAsDefaultInstance();
      SendMessageRequest::default_instance_->InitAsDefaultInstance();
      Request::default_instance_->InitAsDefaultInstance();
      StatusResponse::default_instance_->InitAsDefaultInstance();
      Chat::default_instance_->InitAsDefaultInstance();
      ChatsResponse::default_instance_->InitAsDefaultInstance();
      Contact::default_instance_->InitAsDefaultInstance();
      ContactsResponse::default_instance_->InitAsDefaultInstance();
      MessageToRecieve::default_instance_->InitAsDefaultInstance();
      MessagesResponse::default_instance_->InitAsDefaultInstance();
      Response::default_instance_->InitAsDefaultInstance();
      WrappedMessage::default_instance_->InitAsDefaultInstance();
      LengthPrefix::default_instance_->InitAsDefaultInstance();
      ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_2eproto);
  }

// Force AddDescriptors() to be called at static initialization time.
  struct StaticDescriptorInitializer_messages_2eproto {
    StaticDescriptorInitializer_messages_2eproto() {
        protobuf_AddDesc_messages_2eproto();
    }
  } static_descriptor_initializer_messages_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
  const int RegisterRequest::kNameFieldNumber;
  const int RegisterRequest::kEmailFieldNumber;
  const int RegisterRequest::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

  RegisterRequest::RegisterRequest()
      : ::google::protobuf::Message(), _internal_metadata_(NULL) {
      SharedCtor();
      // @@protoc_insertion_point(constructor:elegram.RegisterRequest)
  }

  void RegisterRequest::InitAsDefaultInstance() {
      _is_default_instance_ = true;
  }

  RegisterRequest::RegisterRequest(const RegisterRequest &from)
      : ::google::protobuf::Message(),
        _internal_metadata_(NULL) {
      SharedCtor();
      MergeFrom(from);
      // @@protoc_insertion_point(copy_constructor:elegram.RegisterRequest)
  }

  void RegisterRequest::SharedCtor() {
      _is_default_instance_ = false;
      ::google::protobuf::internal::GetEmptyString();
      _cached_size_ = 0;
      name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  RegisterRequest::~RegisterRequest() {
      // @@protoc_insertion_point(destructor:elegram.RegisterRequest)
      SharedDtor();
  }

  void RegisterRequest::SharedDtor() {
      name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      if (this != default_instance_) {
      }
  }

  void RegisterRequest::SetCachedSize(int size) const {
      GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
      _cached_size_ = size;
      GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor *RegisterRequest::descriptor() {
      protobuf_AssignDescriptorsOnce();
      return RegisterRequest_descriptor_;
  }

  const RegisterRequest &RegisterRequest::default_instance() {
      if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
      return *default_instance_;
  }

  RegisterRequest *RegisterRequest::default_instance_ = NULL;

  RegisterRequest *RegisterRequest::New(::google::protobuf::Arena *arena) const {
      RegisterRequest *n = new RegisterRequest;
      if (arena != NULL) {
          arena->Own(n);
      }
      return n;
  }

  void RegisterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:elegram.RegisterRequest)
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  bool RegisterRequest::MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
      ::google::protobuf::uint32 tag;
      // @@protoc_insertion_point(parse_start:elegram.RegisterRequest)
      for (;;) {
          ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
          tag = p.first;
          if (!p.second) goto handle_unusual;
          switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
              // optional string name = 1;
              case 1: {
                  if (tag == 10) {
                      DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                          input, this->mutable_name()));
                      DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                          this->name().data(), this->name().length(),
                          ::google::protobuf::internal::WireFormatLite::PARSE,
                          "elegram.RegisterRequest.name"));
                  } else {
                      goto handle_unusual;
                  }
                  if (input->ExpectTag(18)) goto parse_email;
                  break;
              }

                  // optional string email = 2;
              case 2: {
                  if (tag == 18) {
                        parse_email:
                      DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                          input, this->mutable_email()));
                      DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                          this->email().data(), this->email().length(),
                          ::google::protobuf::internal::WireFormatLite::PARSE,
                          "elegram.RegisterRequest.email"));
                  } else {
                      goto handle_unusual;
                  }
                  if (input->ExpectTag(26)) goto parse_password;
                  break;
              }

                  // optional string password = 3;
              case 3: {
                  if (tag == 26) {
                        parse_password:
                      DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                          input, this->mutable_password()));
                      DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                          this->password().data(), this->password().length(),
                          ::google::protobuf::internal::WireFormatLite::PARSE,
                          "elegram.RegisterRequest.password"));
                  } else {
                      goto handle_unusual;
                  }
                  if (input->ExpectAtEnd()) goto success;
                  break;
              }

              default: {
                    handle_unusual:
                  if (tag == 0 ||
                      ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                          ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                      goto success;
                  }
                  DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                  break;
              }
          }
      }
        success:
      // @@protoc_insertion_point(parse_success:elegram.RegisterRequest)
      return true;
        failure:
      // @@protoc_insertion_point(parse_failure:elegram.RegisterRequest)
      return false;
#undef DO_
  }

  void RegisterRequest::SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream *output) const {
      // @@protoc_insertion_point(serialize_start:elegram.RegisterRequest)
      // optional string name = 1;
      if (this->name().size() > 0) {
          ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->name().data(), this->name().length(),
              ::google::protobuf::internal::WireFormatLite::SERIALIZE,
              "elegram.RegisterRequest.name");
          ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
              1, this->name(), output);
      }

      // optional string email = 2;
      if (this->email().size() > 0) {
          ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->email().data(), this->email().length(),
              ::google::protobuf::internal::WireFormatLite::SERIALIZE,
              "elegram.RegisterRequest.email");
          ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
              2, this->email(), output);
      }

      // optional string password = 3;
      if (this->password().size() > 0) {
          ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->password().data(), this->password().length(),
              ::google::protobuf::internal::WireFormatLite::SERIALIZE,
              "elegram.RegisterRequest.password");
          ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
              3, this->password(), output);
      }

      // @@protoc_insertion_point(serialize_end:elegram.RegisterRequest)
  }

  ::google::protobuf::uint8 *RegisterRequest::InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8 *target) const {
      // @@protoc_insertion_point(serialize_to_array_start:elegram.RegisterRequest)
      // optional string name = 1;
      if (this->name().size() > 0) {
          ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->name().data(), this->name().length(),
              ::google::protobuf::internal::WireFormatLite::SERIALIZE,
              "elegram.RegisterRequest.name");
          target =
              ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                  1, this->name(), target);
      }

      // optional string email = 2;
      if (this->email().size() > 0) {
          ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->email().data(), this->email().length(),
              ::google::protobuf::internal::WireFormatLite::SERIALIZE,
              "elegram.RegisterRequest.email");
          target =
              ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                  2, this->email(), target);
      }

      // optional string password = 3;
      if (this->password().size() > 0) {
          ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->password().data(), this->password().length(),
              ::google::protobuf::internal::WireFormatLite::SERIALIZE,
              "elegram.RegisterRequest.password");
          target =
              ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                  3, this->password(), target);
      }

      // @@protoc_insertion_point(serialize_to_array_end:elegram.RegisterRequest)
      return target;
  }

  int RegisterRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:elegram.RegisterRequest)
      int total_size = 0;

      // optional string name = 1;
      if (this->name().size() > 0) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::StringSize(
                  this->name());
      }

      // optional string email = 2;
      if (this->email().size() > 0) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::StringSize(
                  this->email());
      }

      // optional string password = 3;
      if (this->password().size() > 0) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::StringSize(
                  this->password());
      }

      GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
      _cached_size_ = total_size;
      GOOGLE_SAFE_CONCURRENT_WRITES_END();
      return total_size;
  }

  void RegisterRequest::MergeFrom(const ::google::protobuf::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:elegram.RegisterRequest)
      if (GOOGLE_PREDICT_FALSE(&from == this)) {
          ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
      }
      const RegisterRequest *source =
          ::google::protobuf::internal::DynamicCastToGenerated<const RegisterRequest>(
              &from);
      if (source == NULL) {
          // @@protoc_insertion_point(generalized_merge_from_cast_fail:elegram.RegisterRequest)
          ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      } else {
          // @@protoc_insertion_point(generalized_merge_from_cast_success:elegram.RegisterRequest)
          MergeFrom(*source);
      }
  }

  void RegisterRequest::MergeFrom(const RegisterRequest &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:elegram.RegisterRequest)
      if (GOOGLE_PREDICT_FALSE(&from == this)) {
          ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
      }
      if (from.name().size() > 0) {

          name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                                  from.name_);
      }
      if (from.email().size() > 0) {

          email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                                   from.email_);
      }
      if (from.password().size() > 0) {

          password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                                      from.password_);
      }
  }

  void RegisterRequest::CopyFrom(const ::google::protobuf::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:elegram.RegisterRequest)
      if (&from == this) return;
      Clear();
      MergeFrom(from);
  }

  void RegisterRequest::CopyFrom(const RegisterRequest &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:elegram.RegisterRequest)
      if (&from == this) return;
      Clear();
      MergeFrom(from);
  }

  bool RegisterRequest::IsInitialized() const {

      return true;
  }

  void RegisterRequest::Swap(RegisterRequest *other) {
      if (other == this) return;
      InternalSwap(other);
  }
  void RegisterRequest::InternalSwap(RegisterRequest *other) {
      name_.Swap(&other->name_);
      email_.Swap(&other->email_);
      password_.Swap(&other->password_);
      _internal_metadata_.Swap(&other->_internal_metadata_);
      std::swap(_cached_size_, other->_cached_size_);
  }

  ::google::protobuf::Metadata RegisterRequest::GetMetadata() const {
      protobuf_AssignDescriptorsOnce();
      ::google::protobuf::Metadata metadata;
      metadata.descriptor = RegisterRequest_descriptor_;
      metadata.reflection = RegisterRequest_reflection_;
      return metadata;
  }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
                                                                                                                          // RegisterRequest

// optional string name = 1;
void RegisterRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RegisterRequest::name() const {
  // @@protoc_insertion_point(field_get:elegram.RegisterRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterRequest::set_name(const ::std::string& value) {

  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:elegram.RegisterRequest.name)
}
 void RegisterRequest::set_name(const char* value) {

  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:elegram.RegisterRequest.name)
}
 void RegisterRequest::set_name(const char* value, size_t size) {

  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:elegram.RegisterRequest.name)
}
 ::std::string* RegisterRequest::mutable_name() {

  // @@protoc_insertion_point(field_mutable:elegram.RegisterRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RegisterRequest::release_name() {
  // @@protoc_insertion_point(field_release:elegram.RegisterRequest.name)

  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {

  } else {

  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:elegram.RegisterRequest.name)
}

// optional string email = 2;
void RegisterRequest::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RegisterRequest::email() const {
  // @@protoc_insertion_point(field_get:elegram.RegisterRequest.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterRequest::set_email(const ::std::string& value) {

  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:elegram.RegisterRequest.email)
}
 void RegisterRequest::set_email(const char* value) {

  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:elegram.RegisterRequest.email)
}
 void RegisterRequest::set_email(const char* value, size_t size) {

  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:elegram.RegisterRequest.email)
}
 ::std::string* RegisterRequest::mutable_email() {

  // @@protoc_insertion_point(field_mutable:elegram.RegisterRequest.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RegisterRequest::release_email() {
  // @@protoc_insertion_point(field_release:elegram.RegisterRequest.email)

  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterRequest::set_allocated_email(::std::string* email) {
  if (email != NULL) {

  } else {

  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:elegram.RegisterRequest.email)
}

// optional string password = 3;
void RegisterRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RegisterRequest::password() const {
  // @@protoc_insertion_point(field_get:elegram.RegisterRequest.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterRequest::set_password(const ::std::string& value) {

  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:elegram.RegisterRequest.password)
}
 void RegisterRequest::set_password(const char* value) {

  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:elegram.RegisterRequest.password)
}
 void RegisterRequest::set_password(const char* value, size_t size) {

  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:elegram.RegisterRequest.password)
}
 ::std::string* RegisterRequest::mutable_password() {

  // @@protoc_insertion_point(field_mutable:elegram.RegisterRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RegisterRequest::release_password() {
  // @@protoc_insertion_point(field_release:elegram.RegisterRequest.password)

  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {

  } else {

  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:elegram.RegisterRequest.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
  const int LoginRequest::kNameFieldNumber;
  const int LoginRequest::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

  LoginRequest::LoginRequest()
      : ::google::protobuf::Message(), _internal_metadata_(NULL) {
      SharedCtor();
      // @@protoc_insertion_point(constructor:elegram.LoginRequest)
  }

  void LoginRequest::InitAsDefaultInstance() {
      _is_default_instance_ = true;
  }

  LoginRequest::LoginRequest(const LoginRequest &from)
      : ::google::protobuf::Message(),
        _internal_metadata_(NULL) {
      SharedCtor();
      MergeFrom(from);
      // @@protoc_insertion_point(copy_constructor:elegram.LoginRequest)
  }

  void LoginRequest::SharedCtor() {
      _is_default_instance_ = false;
      ::google::protobuf::internal::GetEmptyString();
      _cached_size_ = 0;
      name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  LoginRequest::~LoginRequest() {
      // @@protoc_insertion_point(destructor:elegram.LoginRequest)
      SharedDtor();
  }

  void LoginRequest::SharedDtor() {
      name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      if (this != default_instance_) {
      }
  }

  void LoginRequest::SetCachedSize(int size) const {
      GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
      _cached_size_ = size;
      GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor *LoginRequest::descriptor() {
      protobuf_AssignDescriptorsOnce();
      return LoginRequest_descriptor_;
  }

  const LoginRequest &LoginRequest::default_instance() {
      if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
      return *default_instance_;
  }

  LoginRequest *LoginRequest::default_instance_ = NULL;

  LoginRequest *LoginRequest::New(::google::protobuf::Arena *arena) const {
      LoginRequest *n = new LoginRequest;
      if (arena != NULL) {
          arena->Own(n);
      }
      return n;
  }

  void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:elegram.LoginRequest)
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  bool LoginRequest::MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
      ::google::protobuf::uint32 tag;
      // @@protoc_insertion_point(parse_start:elegram.LoginRequest)
      for (;;) {
          ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
          tag = p.first;
          if (!p.second) goto handle_unusual;
          switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
              // optional string name = 1;
              case 1: {
                  if (tag == 10) {
                      DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                          input, this->mutable_name()));
                      DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                          this->name().data(), this->name().length(),
                          ::google::protobuf::internal::WireFormatLite::PARSE,
                          "elegram.LoginRequest.name"));
                  } else {
                      goto handle_unusual;
                  }
                  if (input->ExpectTag(18)) goto parse_password;
                  break;
              }

                  // optional string password = 2;
              case 2: {
                  if (tag == 18) {
                        parse_password:
                      DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                          input, this->mutable_password()));
                      DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                          this->password().data(), this->password().length(),
                          ::google::protobuf::internal::WireFormatLite::PARSE,
                          "elegram.LoginRequest.password"));
                  } else {
                      goto handle_unusual;
                  }
                  if (input->ExpectAtEnd()) goto success;
                  break;
              }

              default: {
                    handle_unusual:
                  if (tag == 0 ||
                      ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                          ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                      goto success;
                  }
                  DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                  break;
              }
          }
      }
        success:
      // @@protoc_insertion_point(parse_success:elegram.LoginRequest)
      return true;
        failure:
      // @@protoc_insertion_point(parse_failure:elegram.LoginRequest)
      return false;
#undef DO_
  }

  void LoginRequest::SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream *output) const {
      // @@protoc_insertion_point(serialize_start:elegram.LoginRequest)
      // optional string name = 1;
      if (this->name().size() > 0) {
          ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->name().data(), this->name().length(),
              ::google::protobuf::internal::WireFormatLite::SERIALIZE,
              "elegram.LoginRequest.name");
          ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
              1, this->name(), output);
      }

      // optional string password = 2;
      if (this->password().size() > 0) {
          ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->password().data(), this->password().length(),
              ::google::protobuf::internal::WireFormatLite::SERIALIZE,
              "elegram.LoginRequest.password");
          ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
              2, this->password(), output);
      }

      // @@protoc_insertion_point(serialize_end:elegram.LoginRequest)
  }

  ::google::protobuf::uint8 *LoginRequest::InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8 *target) const {
      // @@protoc_insertion_point(serialize_to_array_start:elegram.LoginRequest)
      // optional string name = 1;
      if (this->name().size() > 0) {
          ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->name().data(), this->name().length(),
              ::google::protobuf::internal::WireFormatLite::SERIALIZE,
              "elegram.LoginRequest.name");
          target =
              ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                  1, this->name(), target);
      }

      // optional string password = 2;
      if (this->password().size() > 0) {
          ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->password().data(), this->password().length(),
              ::google::protobuf::internal::WireFormatLite::SERIALIZE,
              "elegram.LoginRequest.password");
          target =
              ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                  2, this->password(), target);
      }

      // @@protoc_insertion_point(serialize_to_array_end:elegram.LoginRequest)
      return target;
  }

  int LoginRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:elegram.LoginRequest)
      int total_size = 0;

      // optional string name = 1;
      if (this->name().size() > 0) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::StringSize(
                  this->name());
      }

      // optional string password = 2;
      if (this->password().size() > 0) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::StringSize(
                  this->password());
      }

      GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
      _cached_size_ = total_size;
      GOOGLE_SAFE_CONCURRENT_WRITES_END();
      return total_size;
  }

  void LoginRequest::MergeFrom(const ::google::protobuf::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:elegram.LoginRequest)
      if (GOOGLE_PREDICT_FALSE(&from == this)) {
          ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
      }
      const LoginRequest *source =
          ::google::protobuf::internal::DynamicCastToGenerated<const LoginRequest>(
              &from);
      if (source == NULL) {
          // @@protoc_insertion_point(generalized_merge_from_cast_fail:elegram.LoginRequest)
          ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      } else {
          // @@protoc_insertion_point(generalized_merge_from_cast_success:elegram.LoginRequest)
          MergeFrom(*source);
      }
  }

  void LoginRequest::MergeFrom(const LoginRequest &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:elegram.LoginRequest)
      if (GOOGLE_PREDICT_FALSE(&from == this)) {
          ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
      }
      if (from.name().size() > 0) {

          name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                                  from.name_);
      }
      if (from.password().size() > 0) {

          password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                                      from.password_);
      }
  }

  void LoginRequest::CopyFrom(const ::google::protobuf::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:elegram.LoginRequest)
      if (&from == this) return;
      Clear();
      MergeFrom(from);
  }

  void LoginRequest::CopyFrom(const LoginRequest &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:elegram.LoginRequest)
      if (&from == this) return;
      Clear();
      MergeFrom(from);
  }

  bool LoginRequest::IsInitialized() const {

      return true;
  }

  void LoginRequest::Swap(LoginRequest *other) {
      if (other == this) return;
      InternalSwap(other);
  }
  void LoginRequest::InternalSwap(LoginRequest *other) {
      name_.Swap(&other->name_);
      password_.Swap(&other->password_);
      _internal_metadata_.Swap(&other->_internal_metadata_);
      std::swap(_cached_size_, other->_cached_size_);
  }

  ::google::protobuf::Metadata LoginRequest::GetMetadata() const {
      protobuf_AssignDescriptorsOnce();
      ::google::protobuf::Metadata metadata;
      metadata.descriptor = LoginRequest_descriptor_;
      metadata.reflection = LoginRequest_reflection_;
      return metadata;
  }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
                                                                                                                          // LoginRequest

// optional string name = 1;
void LoginRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LoginRequest::name() const {
  // @@protoc_insertion_point(field_get:elegram.LoginRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequest::set_name(const ::std::string& value) {

  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:elegram.LoginRequest.name)
}
 void LoginRequest::set_name(const char* value) {

  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:elegram.LoginRequest.name)
}
 void LoginRequest::set_name(const char* value, size_t size) {

  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:elegram.LoginRequest.name)
}
 ::std::string* LoginRequest::mutable_name() {

  // @@protoc_insertion_point(field_mutable:elegram.LoginRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginRequest::release_name() {
  // @@protoc_insertion_point(field_release:elegram.LoginRequest.name)

  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {

  } else {

  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:elegram.LoginRequest.name)
}

// optional string password = 2;
void LoginRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LoginRequest::password() const {
  // @@protoc_insertion_point(field_get:elegram.LoginRequest.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequest::set_password(const ::std::string& value) {

  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:elegram.LoginRequest.password)
}
 void LoginRequest::set_password(const char* value) {

  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:elegram.LoginRequest.password)
}
 void LoginRequest::set_password(const char* value, size_t size) {

  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:elegram.LoginRequest.password)
}
 ::std::string* LoginRequest::mutable_password() {

  // @@protoc_insertion_point(field_mutable:elegram.LoginRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginRequest::release_password() {
  // @@protoc_insertion_point(field_release:elegram.LoginRequest.password)

  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {

  } else {

  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:elegram.LoginRequest.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

  AllMyChatsRequest::AllMyChatsRequest()
      : ::google::protobuf::Message(), _internal_metadata_(NULL) {
      SharedCtor();
      // @@protoc_insertion_point(constructor:elegram.AllMyChatsRequest)
  }

  void AllMyChatsRequest::InitAsDefaultInstance() {
      _is_default_instance_ = true;
  }

  AllMyChatsRequest::AllMyChatsRequest(const AllMyChatsRequest &from)
      : ::google::protobuf::Message(),
        _internal_metadata_(NULL) {
      SharedCtor();
      MergeFrom(from);
      // @@protoc_insertion_point(copy_constructor:elegram.AllMyChatsRequest)
  }

  void AllMyChatsRequest::SharedCtor() {
      _is_default_instance_ = false;
      _cached_size_ = 0;
  }

  AllMyChatsRequest::~AllMyChatsRequest() {
      // @@protoc_insertion_point(destructor:elegram.AllMyChatsRequest)
      SharedDtor();
  }

  void AllMyChatsRequest::SharedDtor() {
      if (this != default_instance_) {
      }
  }

  void AllMyChatsRequest::SetCachedSize(int size) const {
      GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
      _cached_size_ = size;
      GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor *AllMyChatsRequest::descriptor() {
      protobuf_AssignDescriptorsOnce();
      return AllMyChatsRequest_descriptor_;
  }

  const AllMyChatsRequest &AllMyChatsRequest::default_instance() {
      if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
      return *default_instance_;
  }

  AllMyChatsRequest *AllMyChatsRequest::default_instance_ = NULL;

  AllMyChatsRequest *AllMyChatsRequest::New(::google::protobuf::Arena *arena) const {
      AllMyChatsRequest *n = new AllMyChatsRequest;
      if (arena != NULL) {
          arena->Own(n);
      }
      return n;
  }

  void AllMyChatsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:elegram.AllMyChatsRequest)
  }

  bool AllMyChatsRequest::MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
      ::google::protobuf::uint32 tag;
      // @@protoc_insertion_point(parse_start:elegram.AllMyChatsRequest)
      for (;;) {
          ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
          tag = p.first;
          if (!p.second) goto handle_unusual;
            handle_unusual:
          if (tag == 0 ||
              ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                  ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
              goto success;
          }
          DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
      }
        success:
      // @@protoc_insertion_point(parse_success:elegram.AllMyChatsRequest)
      return true;
        failure:
      // @@protoc_insertion_point(parse_failure:elegram.AllMyChatsRequest)
      return false;
#undef DO_
  }

  void AllMyChatsRequest::SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream *output) const {
      // @@protoc_insertion_point(serialize_start:elegram.AllMyChatsRequest)
      // @@protoc_insertion_point(serialize_end:elegram.AllMyChatsRequest)
  }

  ::google::protobuf::uint8 *AllMyChatsRequest::InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8 *target) const {
      // @@protoc_insertion_point(serialize_to_array_start:elegram.AllMyChatsRequest)
      // @@protoc_insertion_point(serialize_to_array_end:elegram.AllMyChatsRequest)
      return target;
  }

  int AllMyChatsRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:elegram.AllMyChatsRequest)
      int total_size = 0;

      GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
      _cached_size_ = total_size;
      GOOGLE_SAFE_CONCURRENT_WRITES_END();
      return total_size;
  }

  void AllMyChatsRequest::MergeFrom(const ::google::protobuf::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:elegram.AllMyChatsRequest)
      if (GOOGLE_PREDICT_FALSE(&from == this)) {
          ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
      }
      const AllMyChatsRequest *source =
          ::google::protobuf::internal::DynamicCastToGenerated<const AllMyChatsRequest>(
              &from);
      if (source == NULL) {
          // @@protoc_insertion_point(generalized_merge_from_cast_fail:elegram.AllMyChatsRequest)
          ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      } else {
          // @@protoc_insertion_point(generalized_merge_from_cast_success:elegram.AllMyChatsRequest)
          MergeFrom(*source);
      }
  }

  void AllMyChatsRequest::MergeFrom(const AllMyChatsRequest &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:elegram.AllMyChatsRequest)
      if (GOOGLE_PREDICT_FALSE(&from == this)) {
          ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
      }
  }

  void AllMyChatsRequest::CopyFrom(const ::google::protobuf::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:elegram.AllMyChatsRequest)
      if (&from == this) return;
      Clear();
      MergeFrom(from);
  }

  void AllMyChatsRequest::CopyFrom(const AllMyChatsRequest &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:elegram.AllMyChatsRequest)
      if (&from == this) return;
      Clear();
      MergeFrom(from);
  }

  bool AllMyChatsRequest::IsInitialized() const {

      return true;
  }

  void AllMyChatsRequest::Swap(AllMyChatsRequest *other) {
      if (other == this) return;
      InternalSwap(other);
  }
  void AllMyChatsRequest::InternalSwap(AllMyChatsRequest *other) {
      _internal_metadata_.Swap(&other->_internal_metadata_);
      std::swap(_cached_size_, other->_cached_size_);
  }

  ::google::protobuf::Metadata AllMyChatsRequest::GetMetadata() const {
      protobuf_AssignDescriptorsOnce();
      ::google::protobuf::Metadata metadata;
      metadata.descriptor = AllMyChatsRequest_descriptor_;
      metadata.reflection = AllMyChatsRequest_reflection_;
      return metadata;
  }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
  // AllMyChatsRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

  AllMyContactsRequest::AllMyContactsRequest()
      : ::google::protobuf::Message(), _internal_metadata_(NULL) {
      SharedCtor();
      // @@protoc_insertion_point(constructor:elegram.AllMyContactsRequest)
  }

  void AllMyContactsRequest::InitAsDefaultInstance() {
      _is_default_instance_ = true;
  }

  AllMyContactsRequest::AllMyContactsRequest(const AllMyContactsRequest &from)
      : ::google::protobuf::Message(),
        _internal_metadata_(NULL) {
      SharedCtor();
      MergeFrom(from);
      // @@protoc_insertion_point(copy_constructor:elegram.AllMyContactsRequest)
  }

  void AllMyContactsRequest::SharedCtor() {
      _is_default_instance_ = false;
      _cached_size_ = 0;
  }

  AllMyContactsRequest::~AllMyContactsRequest() {
      // @@protoc_insertion_point(destructor:elegram.AllMyContactsRequest)
      SharedDtor();
  }

  void AllMyContactsRequest::SharedDtor() {
      if (this != default_instance_) {
      }
  }

  void AllMyContactsRequest::SetCachedSize(int size) const {
      GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
      _cached_size_ = size;
      GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor *AllMyContactsRequest::descriptor() {
      protobuf_AssignDescriptorsOnce();
      return AllMyContactsRequest_descriptor_;
  }

  const AllMyContactsRequest &AllMyContactsRequest::default_instance() {
      if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
      return *default_instance_;
  }

  AllMyContactsRequest *AllMyContactsRequest::default_instance_ = NULL;

  AllMyContactsRequest *AllMyContactsRequest::New(::google::protobuf::Arena *arena) const {
      AllMyContactsRequest *n = new AllMyContactsRequest;
      if (arena != NULL) {
          arena->Own(n);
      }
      return n;
  }

  void AllMyContactsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:elegram.AllMyContactsRequest)
  }

  bool AllMyContactsRequest::MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
      ::google::protobuf::uint32 tag;
      // @@protoc_insertion_point(parse_start:elegram.AllMyContactsRequest)
      for (;;) {
          ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
          tag = p.first;
          if (!p.second) goto handle_unusual;
            handle_unusual:
          if (tag == 0 ||
              ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                  ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
              goto success;
          }
          DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
      }
        success:
      // @@protoc_insertion_point(parse_success:elegram.AllMyContactsRequest)
      return true;
        failure:
      // @@protoc_insertion_point(parse_failure:elegram.AllMyContactsRequest)
      return false;
#undef DO_
  }

  void AllMyContactsRequest::SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream *output) const {
      // @@protoc_insertion_point(serialize_start:elegram.AllMyContactsRequest)
      // @@protoc_insertion_point(serialize_end:elegram.AllMyContactsRequest)
  }

  ::google::protobuf::uint8 *AllMyContactsRequest::InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8 *target) const {
      // @@protoc_insertion_point(serialize_to_array_start:elegram.AllMyContactsRequest)
      // @@protoc_insertion_point(serialize_to_array_end:elegram.AllMyContactsRequest)
      return target;
  }

  int AllMyContactsRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:elegram.AllMyContactsRequest)
      int total_size = 0;

      GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
      _cached_size_ = total_size;
      GOOGLE_SAFE_CONCURRENT_WRITES_END();
      return total_size;
  }

  void AllMyContactsRequest::MergeFrom(const ::google::protobuf::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:elegram.AllMyContactsRequest)
      if (GOOGLE_PREDICT_FALSE(&from == this)) {
          ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
      }
      const AllMyContactsRequest *source =
          ::google::protobuf::internal::DynamicCastToGenerated<const AllMyContactsRequest>(
              &from);
      if (source == NULL) {
          // @@protoc_insertion_point(generalized_merge_from_cast_fail:elegram.AllMyContactsRequest)
          ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      } else {
          // @@protoc_insertion_point(generalized_merge_from_cast_success:elegram.AllMyContactsRequest)
          MergeFrom(*source);
      }
  }

  void AllMyContactsRequest::MergeFrom(const AllMyContactsRequest &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:elegram.AllMyContactsRequest)
      if (GOOGLE_PREDICT_FALSE(&from == this)) {
          ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
      }
  }

  void AllMyContactsRequest::CopyFrom(const ::google::protobuf::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:elegram.AllMyContactsRequest)
      if (&from == this) return;
      Clear();
      MergeFrom(from);
  }

  void AllMyContactsRequest::CopyFrom(const AllMyContactsRequest &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:elegram.AllMyContactsRequest)
      if (&from == this) return;
      Clear();
      MergeFrom(from);
  }

  bool AllMyContactsRequest::IsInitialized() const {

      return true;
  }

  void AllMyContactsRequest::Swap(AllMyContactsRequest *other) {
      if (other == this) return;
      InternalSwap(other);
  }
  void AllMyContactsRequest::InternalSwap(AllMyContactsRequest *other) {
      _internal_metadata_.Swap(&other->_internal_metadata_);
      std::swap(_cached_size_, other->_cached_size_);
  }

  ::google::protobuf::Metadata AllMyContactsRequest::GetMetadata() const {
      protobuf_AssignDescriptorsOnce();
      ::google::protobuf::Metadata metadata;
      metadata.descriptor = AllMyContactsRequest_descriptor_;
      metadata.reflection = AllMyContactsRequest_reflection_;
      return metadata;
  }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
  // AllMyContactsRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
  const int MessagesRequest::kChatIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

  MessagesRequest::MessagesRequest()
      : ::google::protobuf::Message(), _internal_metadata_(NULL) {
      SharedCtor();
      // @@protoc_insertion_point(constructor:elegram.MessagesRequest)
  }

  void MessagesRequest::InitAsDefaultInstance() {
      _is_default_instance_ = true;
  }

  MessagesRequest::MessagesRequest(const MessagesRequest &from)
      : ::google::protobuf::Message(),
        _internal_metadata_(NULL) {
      SharedCtor();
      MergeFrom(from);
      // @@protoc_insertion_point(copy_constructor:elegram.MessagesRequest)
  }

  void MessagesRequest::SharedCtor() {
      _is_default_instance_ = false;
      _cached_size_ = 0;
      chat_id_ = GOOGLE_ULONGLONG(0);
  }

  MessagesRequest::~MessagesRequest() {
      // @@protoc_insertion_point(destructor:elegram.MessagesRequest)
      SharedDtor();
  }

  void MessagesRequest::SharedDtor() {
      if (this != default_instance_) {
      }
  }

  void MessagesRequest::SetCachedSize(int size) const {
      GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
      _cached_size_ = size;
      GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor *MessagesRequest::descriptor() {
      protobuf_AssignDescriptorsOnce();
      return MessagesRequest_descriptor_;
  }

  const MessagesRequest &MessagesRequest::default_instance() {
      if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
      return *default_instance_;
  }

  MessagesRequest *MessagesRequest::default_instance_ = NULL;

  MessagesRequest *MessagesRequest::New(::google::protobuf::Arena *arena) const {
      MessagesRequest *n = new MessagesRequest;
      if (arena != NULL) {
          arena->Own(n);
      }
      return n;
  }

  void MessagesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:elegram.MessagesRequest)
      chat_id_ = GOOGLE_ULONGLONG(0);
  }

  bool MessagesRequest::MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
      ::google::protobuf::uint32 tag;
      // @@protoc_insertion_point(parse_start:elegram.MessagesRequest)
      for (;;) {
          ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
          tag = p.first;
          if (!p.second) goto handle_unusual;
          switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
              // optional uint64 chat_id = 1;
              case 1: {
                  if (tag == 8) {
                      DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                          ::google::protobuf::uint64,
                          ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                          input, &chat_id_)));

                  } else {
                      goto handle_unusual;
                  }
                  if (input->ExpectAtEnd()) goto success;
                  break;
              }

              default: {
                    handle_unusual:
                  if (tag == 0 ||
                      ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                          ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                      goto success;
                  }
                  DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                  break;
              }
          }
      }
        success:
      // @@protoc_insertion_point(parse_success:elegram.MessagesRequest)
      return true;
        failure:
      // @@protoc_insertion_point(parse_failure:elegram.MessagesRequest)
      return false;
#undef DO_
  }

  void MessagesRequest::SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream *output) const {
      // @@protoc_insertion_point(serialize_start:elegram.MessagesRequest)
      // optional uint64 chat_id = 1;
      if (this->chat_id() != 0) {
          ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_id(), output);
      }

      // @@protoc_insertion_point(serialize_end:elegram.MessagesRequest)
  }

  ::google::protobuf::uint8 *MessagesRequest::InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8 *target) const {
      // @@protoc_insertion_point(serialize_to_array_start:elegram.MessagesRequest)
      // optional uint64 chat_id = 1;
      if (this->chat_id() != 0) {
          target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1,
                                                                                    this->chat_id(),
                                                                                    target);
      }

      // @@protoc_insertion_point(serialize_to_array_end:elegram.MessagesRequest)
      return target;
  }

  int MessagesRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:elegram.MessagesRequest)
      int total_size = 0;

      // optional uint64 chat_id = 1;
      if (this->chat_id() != 0) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::UInt64Size(
                  this->chat_id());
      }

      GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
      _cached_size_ = total_size;
      GOOGLE_SAFE_CONCURRENT_WRITES_END();
      return total_size;
  }

  void MessagesRequest::MergeFrom(const ::google::protobuf::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:elegram.MessagesRequest)
      if (GOOGLE_PREDICT_FALSE(&from == this)) {
          ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
      }
      const MessagesRequest *source =
          ::google::protobuf::internal::DynamicCastToGenerated<const MessagesRequest>(
              &from);
      if (source == NULL) {
          // @@protoc_insertion_point(generalized_merge_from_cast_fail:elegram.MessagesRequest)
          ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      } else {
          // @@protoc_insertion_point(generalized_merge_from_cast_success:elegram.MessagesRequest)
          MergeFrom(*source);
      }
  }

  void MessagesRequest::MergeFrom(const MessagesRequest &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:elegram.MessagesRequest)
      if (GOOGLE_PREDICT_FALSE(&from == this)) {
          ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
      }
      if (from.chat_id() != 0) {
          set_chat_id(from.chat_id());
      }
  }

  void MessagesRequest::CopyFrom(const ::google::protobuf::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:elegram.MessagesRequest)
      if (&from == this) return;
      Clear();
      MergeFrom(from);
  }

  void MessagesRequest::CopyFrom(const MessagesRequest &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:elegram.MessagesRequest)
      if (&from == this) return;
      Clear();
      MergeFrom(from);
  }

  bool MessagesRequest::IsInitialized() const {

      return true;
  }

  void MessagesRequest::Swap(MessagesRequest *other) {
      if (other == this) return;
      InternalSwap(other);
  }
  void MessagesRequest::InternalSwap(MessagesRequest *other) {
      std::swap(chat_id_, other->chat_id_);
      _internal_metadata_.Swap(&other->_internal_metadata_);
      std::swap(_cached_size_, other->_cached_size_);
  }

  ::google::protobuf::Metadata MessagesRequest::GetMetadata() const {
      protobuf_AssignDescriptorsOnce();
      ::google::protobuf::Metadata metadata;
      metadata.descriptor = MessagesRequest_descriptor_;
      metadata.reflection = MessagesRequest_reflection_;
      return metadata;
  }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
                                                                                                                          // MessagesRequest

// optional uint64 chat_id = 1;
void MessagesRequest::clear_chat_id() {
  chat_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 MessagesRequest::chat_id() const {
  // @@protoc_insertion_point(field_get:elegram.MessagesRequest.chat_id)
  return chat_id_;
}
 void MessagesRequest::set_chat_id(::google::protobuf::uint64 value) {

  chat_id_ = value;
  // @@protoc_insertion_point(field_set:elegram.MessagesRequest.chat_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
  const int MessageToSend::kChatIdFieldNumber;
  const int MessageToSend::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

  MessageToSend::MessageToSend()
      : ::google::protobuf::Message(), _internal_metadata_(NULL) {
      SharedCtor();
      // @@protoc_insertion_point(constructor:elegram.MessageToSend)
  }

  void MessageToSend::InitAsDefaultInstance() {
      _is_default_instance_ = true;
  }

  MessageToSend::MessageToSend(const MessageToSend &from)
      : ::google::protobuf::Message(),
        _internal_metadata_(NULL) {
      SharedCtor();
      MergeFrom(from);
      // @@protoc_insertion_point(copy_constructor:elegram.MessageToSend)
  }

  void MessageToSend::SharedCtor() {
      _is_default_instance_ = false;
      ::google::protobuf::internal::GetEmptyString();
      _cached_size_ = 0;
      chat_id_ = GOOGLE_ULONGLONG(0);
      text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  MessageToSend::~MessageToSend() {
      // @@protoc_insertion_point(destructor:elegram.MessageToSend)
      SharedDtor();
  }

  void MessageToSend::SharedDtor() {
      text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      if (this != default_instance_) {
      }
  }

  void MessageToSend::SetCachedSize(int size) const {
      GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
      _cached_size_ = size;
      GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor *MessageToSend::descriptor() {
      protobuf_AssignDescriptorsOnce();
      return MessageToSend_descriptor_;
  }

  const MessageToSend &MessageToSend::default_instance() {
      if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
      return *default_instance_;
  }

  MessageToSend *MessageToSend::default_instance_ = NULL;

  MessageToSend *MessageToSend::New(::google::protobuf::Arena *arena) const {
      MessageToSend *n = new MessageToSend;
      if (arena != NULL) {
          arena->Own(n);
      }
      return n;
  }

  void MessageToSend::Clear() {
// @@protoc_insertion_point(message_clear_start:elegram.MessageToSend)
      chat_id_ = GOOGLE_ULONGLONG(0);
      text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  bool MessageToSend::MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
      ::google::protobuf::uint32 tag;
      // @@protoc_insertion_point(parse_start:elegram.MessageToSend)
      for (;;) {
          ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
          tag = p.first;
          if (!p.second) goto handle_unusual;
          switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
              // optional uint64 chat_id = 1;
              case 1: {
                  if (tag == 8) {
                      DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                          ::google::protobuf::uint64,
                          ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                          input, &chat_id_)));

                  } else {
                      goto handle_unusual;
                  }
                  if (input->ExpectTag(18)) goto parse_text;
                  break;
              }

                  // optional string text = 2;
              case 2: {
                  if (tag == 18) {
                        parse_text:
                      DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                          input, this->mutable_text()));
                      DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                          this->text().data(), this->text().length(),
                          ::google::protobuf::internal::WireFormatLite::PARSE,
                          "elegram.MessageToSend.text"));
                  } else {
                      goto handle_unusual;
                  }
                  if (input->ExpectAtEnd()) goto success;
                  break;
              }

              default: {
                    handle_unusual:
                  if (tag == 0 ||
                      ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                          ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                      goto success;
                  }
                  DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                  break;
              }
          }
      }
        success:
      // @@protoc_insertion_point(parse_success:elegram.MessageToSend)
      return true;
        failure:
      // @@protoc_insertion_point(parse_failure:elegram.MessageToSend)
      return false;
#undef DO_
  }

  void MessageToSend::SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream *output) const {
      // @@protoc_insertion_point(serialize_start:elegram.MessageToSend)
      // optional uint64 chat_id = 1;
      if (this->chat_id() != 0) {
          ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_id(), output);
      }

      // optional string text = 2;
      if (this->text().size() > 0) {
          ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->text().data(), this->text().length(),
              ::google::protobuf::internal::WireFormatLite::SERIALIZE,
              "elegram.MessageToSend.text");
          ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
              2, this->text(), output);
      }

      // @@protoc_insertion_point(serialize_end:elegram.MessageToSend)
  }

  ::google::protobuf::uint8 *MessageToSend::InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8 *target) const {
      // @@protoc_insertion_point(serialize_to_array_start:elegram.MessageToSend)
      // optional uint64 chat_id = 1;
      if (this->chat_id() != 0) {
          target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1,
                                                                                    this->chat_id(),
                                                                                    target);
      }

      // optional string text = 2;
      if (this->text().size() > 0) {
          ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->text().data(), this->text().length(),
              ::google::protobuf::internal::WireFormatLite::SERIALIZE,
              "elegram.MessageToSend.text");
          target =
              ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                  2, this->text(), target);
      }

      // @@protoc_insertion_point(serialize_to_array_end:elegram.MessageToSend)
      return target;
  }

  int MessageToSend::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:elegram.MessageToSend)
      int total_size = 0;

      // optional uint64 chat_id = 1;
      if (this->chat_id() != 0) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::UInt64Size(
                  this->chat_id());
      }

      // optional string text = 2;
      if (this->text().size() > 0) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::StringSize(
                  this->text());
      }

      GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
      _cached_size_ = total_size;
      GOOGLE_SAFE_CONCURRENT_WRITES_END();
      return total_size;
  }

  void MessageToSend::MergeFrom(const ::google::protobuf::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:elegram.MessageToSend)
      if (GOOGLE_PREDICT_FALSE(&from == this)) {
          ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
      }
      const MessageToSend *source =
          ::google::protobuf::internal::DynamicCastToGenerated<const MessageToSend>(
              &from);
      if (source == NULL) {
          // @@protoc_insertion_point(generalized_merge_from_cast_fail:elegram.MessageToSend)
          ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      } else {
          // @@protoc_insertion_point(generalized_merge_from_cast_success:elegram.MessageToSend)
          MergeFrom(*source);
      }
  }

  void MessageToSend::MergeFrom(const MessageToSend &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:elegram.MessageToSend)
      if (GOOGLE_PREDICT_FALSE(&from == this)) {
          ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
      }
      if (from.chat_id() != 0) {
          set_chat_id(from.chat_id());
      }
      if (from.text().size() > 0) {

          text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                                  from.text_);
      }
  }

  void MessageToSend::CopyFrom(const ::google::protobuf::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:elegram.MessageToSend)
      if (&from == this) return;
      Clear();
      MergeFrom(from);
  }

  void MessageToSend::CopyFrom(const MessageToSend &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:elegram.MessageToSend)
      if (&from == this) return;
      Clear();
      MergeFrom(from);
  }

  bool MessageToSend::IsInitialized() const {

      return true;
  }

  void MessageToSend::Swap(MessageToSend *other) {
      if (other == this) return;
      InternalSwap(other);
  }
  void MessageToSend::InternalSwap(MessageToSend *other) {
      std::swap(chat_id_, other->chat_id_);
      text_.Swap(&other->text_);
      _internal_metadata_.Swap(&other->_internal_metadata_);
      std::swap(_cached_size_, other->_cached_size_);
  }

  ::google::protobuf::Metadata MessageToSend::GetMetadata() const {
      protobuf_AssignDescriptorsOnce();
      ::google::protobuf::Metadata metadata;
      metadata.descriptor = MessageToSend_descriptor_;
      metadata.reflection = MessageToSend_reflection_;
      return metadata;
  }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
                                                                                                                          // MessageToSend

// optional uint64 chat_id = 1;
void MessageToSend::clear_chat_id() {
  chat_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 MessageToSend::chat_id() const {
  // @@protoc_insertion_point(field_get:elegram.MessageToSend.chat_id)
  return chat_id_;
}
 void MessageToSend::set_chat_id(::google::protobuf::uint64 value) {

  chat_id_ = value;
  // @@protoc_insertion_point(field_set:elegram.MessageToSend.chat_id)
}

// optional string text = 2;
void MessageToSend::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MessageToSend::text() const {
  // @@protoc_insertion_point(field_get:elegram.MessageToSend.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageToSend::set_text(const ::std::string& value) {

  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:elegram.MessageToSend.text)
}
 void MessageToSend::set_text(const char* value) {

  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:elegram.MessageToSend.text)
}
 void MessageToSend::set_text(const char* value, size_t size) {

  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:elegram.MessageToSend.text)
}
 ::std::string* MessageToSend::mutable_text() {

  // @@protoc_insertion_point(field_mutable:elegram.MessageToSend.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MessageToSend::release_text() {
  // @@protoc_insertion_point(field_release:elegram.MessageToSend.text)

  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageToSend::set_allocated_text(::std::string* text) {
  if (text != NULL) {

  } else {

  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:elegram.MessageToSend.text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
  const int SendMessageRequest::kMesgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

  SendMessageRequest::SendMessageRequest()
      : ::google::protobuf::Message(), _internal_metadata_(NULL) {
      SharedCtor();
      // @@protoc_insertion_point(constructor:elegram.SendMessageRequest)
  }

  void SendMessageRequest::InitAsDefaultInstance() {
      _is_default_instance_ = true;
      mesg_ = const_cast< ::elegram::MessageToSend *>(&::elegram::MessageToSend::default_instance());
  }

  SendMessageRequest::SendMessageRequest(const SendMessageRequest &from)
      : ::google::protobuf::Message(),
        _internal_metadata_(NULL) {
      SharedCtor();
      MergeFrom(from);
      // @@protoc_insertion_point(copy_constructor:elegram.SendMessageRequest)
  }

  void SendMessageRequest::SharedCtor() {
      _is_default_instance_ = false;
      _cached_size_ = 0;
      mesg_ = NULL;
  }

  SendMessageRequest::~SendMessageRequest() {
      // @@protoc_insertion_point(destructor:elegram.SendMessageRequest)
      SharedDtor();
  }

  void SendMessageRequest::SharedDtor() {
      if (this != default_instance_) {
          delete mesg_;
      }
  }

  void SendMessageRequest::SetCachedSize(int size) const {
      GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
      _cached_size_ = size;
      GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor *SendMessageRequest::descriptor() {
      protobuf_AssignDescriptorsOnce();
      return SendMessageRequest_descriptor_;
  }

  const SendMessageRequest &SendMessageRequest::default_instance() {
      if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
      return *default_instance_;
  }

  SendMessageRequest *SendMessageRequest::default_instance_ = NULL;

  SendMessageRequest *SendMessageRequest::New(::google::protobuf::Arena *arena) const {
      SendMessageRequest *n = new SendMessageRequest;
      if (arena != NULL) {
          arena->Own(n);
      }
      return n;
  }

  void SendMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:elegram.SendMessageRequest)
      if (GetArenaNoVirtual() == NULL && mesg_ != NULL) delete mesg_;
      mesg_ = NULL;
  }

  bool SendMessageRequest::MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
      ::google::protobuf::uint32 tag;
      // @@protoc_insertion_point(parse_start:elegram.SendMessageRequest)
      for (;;) {
          ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
          tag = p.first;
          if (!p.second) goto handle_unusual;
          switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
              // optional .elegram.MessageToSend mesg = 1;
              case 1: {
                  if (tag == 10) {
                      DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                          input, mutable_mesg()));
                  } else {
                      goto handle_unusual;
                  }
                  if (input->ExpectAtEnd()) goto success;
                  break;
              }

              default: {
                    handle_unusual:
                  if (tag == 0 ||
                      ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                          ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                      goto success;
                  }
                  DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                  break;
              }
          }
      }
        success:
      // @@protoc_insertion_point(parse_success:elegram.SendMessageRequest)
      return true;
        failure:
      // @@protoc_insertion_point(parse_failure:elegram.SendMessageRequest)
      return false;
#undef DO_
  }

  void SendMessageRequest::SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream *output) const {
      // @@protoc_insertion_point(serialize_start:elegram.SendMessageRequest)
      // optional .elegram.MessageToSend mesg = 1;
      if (this->has_mesg()) {
          ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
              1, *this->mesg_, output);
      }

      // @@protoc_insertion_point(serialize_end:elegram.SendMessageRequest)
  }

  ::google::protobuf::uint8 *SendMessageRequest::InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8 *target) const {
      // @@protoc_insertion_point(serialize_to_array_start:elegram.SendMessageRequest)
      // optional .elegram.MessageToSend mesg = 1;
      if (this->has_mesg()) {
          target = ::google::protobuf::internal::WireFormatLite::
          InternalWriteMessageNoVirtualToArray(
              1, *this->mesg_, false, target);
      }

      // @@protoc_insertion_point(serialize_to_array_end:elegram.SendMessageRequest)
      return target;
  }

  int SendMessageRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:elegram.SendMessageRequest)
      int total_size = 0;

      // optional .elegram.MessageToSend mesg = 1;
      if (this->has_mesg()) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                  *this->mesg_);
      }

      GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
      _cached_size_ = total_size;
      GOOGLE_SAFE_CONCURRENT_WRITES_END();
      return total_size;
  }

  void SendMessageRequest::MergeFrom(const ::google::protobuf::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:elegram.SendMessageRequest)
      if (GOOGLE_PREDICT_FALSE(&from == this)) {
          ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
      }
      const SendMessageRequest *source =
          ::google::protobuf::internal::DynamicCastToGenerated<const SendMessageRequest>(
              &from);
      if (source == NULL) {
          // @@protoc_insertion_point(generalized_merge_from_cast_fail:elegram.SendMessageRequest)
          ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      } else {
          // @@protoc_insertion_point(generalized_merge_from_cast_success:elegram.SendMessageRequest)
          MergeFrom(*source);
      }
  }

  void SendMessageRequest::MergeFrom(const SendMessageRequest &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:elegram.SendMessageRequest)
      if (GOOGLE_PREDICT_FALSE(&from == this)) {
          ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
      }
      if (from.has_mesg()) {
          mutable_mesg()->::elegram::MessageToSend::MergeFrom(from.mesg());
      }
  }

  void SendMessageRequest::CopyFrom(const ::google::protobuf::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:elegram.SendMessageRequest)
      if (&from == this) return;
      Clear();
      MergeFrom(from);
  }

  void SendMessageRequest::CopyFrom(const SendMessageRequest &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:elegram.SendMessageRequest)
      if (&from == this) return;
      Clear();
      MergeFrom(from);
  }

  bool SendMessageRequest::IsInitialized() const {

      return true;
  }

  void SendMessageRequest::Swap(SendMessageRequest *other) {
      if (other == this) return;
      InternalSwap(other);
  }
  void SendMessageRequest::InternalSwap(SendMessageRequest *other) {
      std::swap(mesg_, other->mesg_);
      _internal_metadata_.Swap(&other->_internal_metadata_);
      std::swap(_cached_size_, other->_cached_size_);
  }

  ::google::protobuf::Metadata SendMessageRequest::GetMetadata() const {
      protobuf_AssignDescriptorsOnce();
      ::google::protobuf::Metadata metadata;
      metadata.descriptor = SendMessageRequest_descriptor_;
      metadata.reflection = SendMessageRequest_reflection_;
      return metadata;
  }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
                                                                                                                          // SendMessageRequest

// optional .elegram.MessageToSend mesg = 1;
bool SendMessageRequest::has_mesg() const {
  return !_is_default_instance_ && mesg_ != NULL;
}
void SendMessageRequest::clear_mesg() {
  if (GetArenaNoVirtual() == NULL && mesg_ != NULL) delete mesg_;
  mesg_ = NULL;
}
const ::elegram::MessageToSend& SendMessageRequest::mesg() const {
  // @@protoc_insertion_point(field_get:elegram.SendMessageRequest.mesg)
  return mesg_ != NULL ? *mesg_ : *default_instance_->mesg_;
}
::elegram::MessageToSend* SendMessageRequest::mutable_mesg() {

  if (mesg_ == NULL) {
    mesg_ = new ::elegram::MessageToSend;
  }
  // @@protoc_insertion_point(field_mutable:elegram.SendMessageRequest.mesg)
  return mesg_;
}
::elegram::MessageToSend* SendMessageRequest::release_mesg() {
  // @@protoc_insertion_point(field_release:elegram.SendMessageRequest.mesg)

  ::elegram::MessageToSend* temp = mesg_;
  mesg_ = NULL;
  return temp;
}
void SendMessageRequest::set_allocated_mesg(::elegram::MessageToSend* mesg) {
  delete mesg_;
  mesg_ = mesg;
  if (mesg) {

  } else {

  }
  // @@protoc_insertion_point(field_set_allocated:elegram.SendMessageRequest.mesg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
  const int Request::kRegisterRequestFieldNumber;
  const int Request::kLoginRequestFieldNumber;
  const int Request::kChatsRequestFieldNumber;
  const int Request::kContactsRequestFieldNumber;
  const int Request::kMessagesRequestFieldNumber;
  const int Request::kSendMesgRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

  Request::Request()
      : ::google::protobuf::Message(), _internal_metadata_(NULL) {
      SharedCtor();
      // @@protoc_insertion_point(constructor:elegram.Request)
  }

  void Request::InitAsDefaultInstance() {
      _is_default_instance_ = true;
      Request_default_oneof_instance_->register_request_ =
          const_cast< ::elegram::RegisterRequest *>(&::elegram::RegisterRequest::default_instance());
      Request_default_oneof_instance_->login_request_ =
          const_cast< ::elegram::LoginRequest *>(&::elegram::LoginRequest::default_instance());
      Request_default_oneof_instance_->chats_request_ =
          const_cast< ::elegram::AllMyChatsRequest *>(&::elegram::AllMyChatsRequest::default_instance());
      Request_default_oneof_instance_->contacts_request_ =
          const_cast< ::elegram::AllMyContactsRequest *>(&::elegram::AllMyContactsRequest::default_instance());
      Request_default_oneof_instance_->messages_request_ =
          const_cast< ::elegram::MessagesRequest *>(&::elegram::MessagesRequest::default_instance());
      Request_default_oneof_instance_->send_mesg_request_ =
          const_cast< ::elegram::SendMessageRequest *>(&::elegram::SendMessageRequest::default_instance());
  }

  Request::Request(const Request &from)
      : ::google::protobuf::Message(),
        _internal_metadata_(NULL) {
      SharedCtor();
      MergeFrom(from);
      // @@protoc_insertion_point(copy_constructor:elegram.Request)
  }

  void Request::SharedCtor() {
      _is_default_instance_ = false;
      _cached_size_ = 0;
      clear_has_msg();
  }

  Request::~Request() {
      // @@protoc_insertion_point(destructor:elegram.Request)
      SharedDtor();
  }

  void Request::SharedDtor() {
      if (has_msg()) {
          clear_msg();
      }
      if (this != default_instance_) {
      }
  }

  void Request::SetCachedSize(int size) const {
      GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
      _cached_size_ = size;
      GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor *Request::descriptor() {
      protobuf_AssignDescriptorsOnce();
      return Request_descriptor_;
  }

  const Request &Request::default_instance() {
      if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
      return *default_instance_;
  }

  Request *Request::default_instance_ = NULL;

  Request *Request::New(::google::protobuf::Arena *arena) const {
      Request *n = new Request;
      if (arena != NULL) {
          arena->Own(n);
      }
      return n;
  }

  void Request::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:elegram.Request)
      switch (msg_case()) {
          case kRegisterRequest: {
              delete msg_.register_request_;
              break;
          }
          case kLoginRequest: {
              delete msg_.login_request_;
              break;
          }
          case kChatsRequest: {
              delete msg_.chats_request_;
              break;
          }
          case kContactsRequest: {
              delete msg_.contacts_request_;
              break;
          }
          case kMessagesRequest: {
              delete msg_.messages_request_;
              break;
          }
          case kSendMesgRequest: {
              delete msg_.send_mesg_request_;
              break;
          }
          case MSG_NOT_SET: {
              break;
          }
      }
      _oneof_case_[0] = MSG_NOT_SET;
  }

  void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:elegram.Request)
      clear_msg();
  }

  bool Request::MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
      ::google::protobuf::uint32 tag;
      // @@protoc_insertion_point(parse_start:elegram.Request)
      for (;;) {
          ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
          tag = p.first;
          if (!p.second) goto handle_unusual;
          switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
              // optional .elegram.RegisterRequest register_request = 1;
              case 1: {
                  if (tag == 10) {
                      DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                          input, mutable_register_request()));
                  } else {
                      goto handle_unusual;
                  }
                  if (input->ExpectTag(18)) goto parse_login_request;
                  break;
              }

                  // optional .elegram.LoginRequest login_request = 2;
              case 2: {
                  if (tag == 18) {
                        parse_login_request:
                      DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                          input, mutable_login_request()));
                  } else {
                      goto handle_unusual;
                  }
                  if (input->ExpectTag(26)) goto parse_chats_request;
                  break;
              }

                  // optional .elegram.AllMyChatsRequest chats_request = 3;
              case 3: {
                  if (tag == 26) {
                        parse_chats_request:
                      DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                          input, mutable_chats_request()));
                  } else {
                      goto handle_unusual;
                  }
                  if (input->ExpectTag(34)) goto parse_contacts_request;
                  break;
              }

                  // optional .elegram.AllMyContactsRequest contacts_request = 4;
              case 4: {
                  if (tag == 34) {
                        parse_contacts_request:
                      DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                          input, mutable_contacts_request()));
                  } else {
                      goto handle_unusual;
                  }
                  if (input->ExpectTag(42)) goto parse_messages_request;
                  break;
              }

                  // optional .elegram.MessagesRequest messages_request = 5;
              case 5: {
                  if (tag == 42) {
                        parse_messages_request:
                      DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                          input, mutable_messages_request()));
                  } else {
                      goto handle_unusual;
                  }
                  if (input->ExpectTag(50)) goto parse_send_mesg_request;
                  break;
              }

                  // optional .elegram.SendMessageRequest send_mesg_request = 6;
              case 6: {
                  if (tag == 50) {
                        parse_send_mesg_request:
                      DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                          input, mutable_send_mesg_request()));
                  } else {
                      goto handle_unusual;
                  }
                  if (input->ExpectAtEnd()) goto success;
                  break;
              }

              default: {
                    handle_unusual:
                  if (tag == 0 ||
                      ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                          ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                      goto success;
                  }
                  DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                  break;
              }
          }
      }
        success:
      // @@protoc_insertion_point(parse_success:elegram.Request)
      return true;
        failure:
      // @@protoc_insertion_point(parse_failure:elegram.Request)
      return false;
#undef DO_
  }

  void Request::SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream *output) const {
      // @@protoc_insertion_point(serialize_start:elegram.Request)
      // optional .elegram.RegisterRequest register_request = 1;
      if (has_register_request()) {
          ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
              1, *msg_.register_request_, output);
      }

      // optional .elegram.LoginRequest login_request = 2;
      if (has_login_request()) {
          ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
              2, *msg_.login_request_, output);
      }

      // optional .elegram.AllMyChatsRequest chats_request = 3;
      if (has_chats_request()) {
          ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
              3, *msg_.chats_request_, output);
      }

      // optional .elegram.AllMyContactsRequest contacts_request = 4;
      if (has_contacts_request()) {
          ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
              4, *msg_.contacts_request_, output);
      }

      // optional .elegram.MessagesRequest messages_request = 5;
      if (has_messages_request()) {
          ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
              5, *msg_.messages_request_, output);
      }

      // optional .elegram.SendMessageRequest send_mesg_request = 6;
      if (has_send_mesg_request()) {
          ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
              6, *msg_.send_mesg_request_, output);
      }

      // @@protoc_insertion_point(serialize_end:elegram.Request)
  }

  ::google::protobuf::uint8 *Request::InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8 *target) const {
      // @@protoc_insertion_point(serialize_to_array_start:elegram.Request)
      // optional .elegram.RegisterRequest register_request = 1;
      if (has_register_request()) {
          target = ::google::protobuf::internal::WireFormatLite::
          InternalWriteMessageNoVirtualToArray(
              1, *msg_.register_request_, false, target);
      }

      // optional .elegram.LoginRequest login_request = 2;
      if (has_login_request()) {
          target = ::google::protobuf::internal::WireFormatLite::
          InternalWriteMessageNoVirtualToArray(
              2, *msg_.login_request_, false, target);
      }

      // optional .elegram.AllMyChatsRequest chats_request = 3;
      if (has_chats_request()) {
          target = ::google::protobuf::internal::WireFormatLite::
          InternalWriteMessageNoVirtualToArray(
              3, *msg_.chats_request_, false, target);
      }

      // optional .elegram.AllMyContactsRequest contacts_request = 4;
      if (has_contacts_request()) {
          target = ::google::protobuf::internal::WireFormatLite::
          InternalWriteMessageNoVirtualToArray(
              4, *msg_.contacts_request_, false, target);
      }

      // optional .elegram.MessagesRequest messages_request = 5;
      if (has_messages_request()) {
          target = ::google::protobuf::internal::WireFormatLite::
          InternalWriteMessageNoVirtualToArray(
              5, *msg_.messages_request_, false, target);
      }

      // optional .elegram.SendMessageRequest send_mesg_request = 6;
      if (has_send_mesg_request()) {
          target = ::google::protobuf::internal::WireFormatLite::
          InternalWriteMessageNoVirtualToArray(
              6, *msg_.send_mesg_request_, false, target);
      }

      // @@protoc_insertion_point(serialize_to_array_end:elegram.Request)
      return target;
  }

  int Request::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:elegram.Request)
      int total_size = 0;

      switch (msg_case()) {
          // optional .elegram.RegisterRequest register_request = 1;
          case kRegisterRequest: {
              total_size += 1 +
                  ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                      *msg_.register_request_);
              break;
          }
              // optional .elegram.LoginRequest login_request = 2;
          case kLoginRequest: {
              total_size += 1 +
                  ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                      *msg_.login_request_);
              break;
          }
              // optional .elegram.AllMyChatsRequest chats_request = 3;
          case kChatsRequest: {
              total_size += 1 +
                  ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                      *msg_.chats_request_);
              break;
          }
              // optional .elegram.AllMyContactsRequest contacts_request = 4;
          case kContactsRequest: {
              total_size += 1 +
                  ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                      *msg_.contacts_request_);
              break;
          }
              // optional .elegram.MessagesRequest messages_request = 5;
          case kMessagesRequest: {
              total_size += 1 +
                  ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                      *msg_.messages_request_);
              break;
          }
              // optional .elegram.SendMessageRequest send_mesg_request = 6;
          case kSendMesgRequest: {
              total_size += 1 +
                  ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                      *msg_.send_mesg_request_);
              break;
          }
          case MSG_NOT_SET: {
              break;
          }
      }
      GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
      _cached_size_ = total_size;
      GOOGLE_SAFE_CONCURRENT_WRITES_END();
      return total_size;
  }

  void Request::MergeFrom(const ::google::protobuf::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:elegram.Request)
      if (GOOGLE_PREDICT_FALSE(&from == this)) {
          ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
      }
      const Request *source =
          ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
              &from);
      if (source == NULL) {
          // @@protoc_insertion_point(generalized_merge_from_cast_fail:elegram.Request)
          ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      } else {
          // @@protoc_insertion_point(generalized_merge_from_cast_success:elegram.Request)
          MergeFrom(*source);
      }
  }

  void Request::MergeFrom(const Request &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:elegram.Request)
      if (GOOGLE_PREDICT_FALSE(&from == this)) {
          ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
      }
      switch (from.msg_case()) {
          case kRegisterRequest: {
              mutable_register_request()->::elegram::RegisterRequest::MergeFrom(from.register_request());
              break;
          }
          case kLoginRequest: {
              mutable_login_request()->::elegram::LoginRequest::MergeFrom(from.login_request());
              break;
          }
          case kChatsRequest: {
              mutable_chats_request()->::elegram::AllMyChatsRequest::MergeFrom(from.chats_request());
              break;
          }
          case kContactsRequest: {
              mutable_contacts_request()
                  ->::elegram::AllMyContactsRequest::MergeFrom(from.contacts_request());
              break;
          }
          case kMessagesRequest: {
              mutable_messages_request()->::elegram::MessagesRequest::MergeFrom(from.messages_request());
              break;
          }
          case kSendMesgRequest: {
              mutable_send_mesg_request()
                  ->::elegram::SendMessageRequest::MergeFrom(from.send_mesg_request());
              break;
          }
          case MSG_NOT_SET: {
              break;
          }
      }
  }

  void Request::CopyFrom(const ::google::protobuf::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:elegram.Request)
      if (&from == this) return;
      Clear();
      MergeFrom(from);
  }

  void Request::CopyFrom(const Request &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:elegram.Request)
      if (&from == this) return;
      Clear();
      MergeFrom(from);
  }

  bool Request::IsInitialized() const {

      return true;
  }

  void Request::Swap(Request *other) {
      if (other == this) return;
      InternalSwap(other);
  }
  void Request::InternalSwap(Request *other) {
      std::swap(msg_, other->msg_);
      std::swap(_oneof_case_[0], other->_oneof_case_[0]);
      _internal_metadata_.Swap(&other->_internal_metadata_);
      std::swap(_cached_size_, other->_cached_size_);
  }

  ::google::protobuf::Metadata Request::GetMetadata() const {
      protobuf_AssignDescriptorsOnce();
      ::google::protobuf::Metadata metadata;
      metadata.descriptor = Request_descriptor_;
      metadata.reflection = Request_reflection_;
      return metadata;
  }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
                                                                                                                          // Request

// optional .elegram.RegisterRequest register_request = 1;
bool Request::has_register_request() const {
  return msg_case() == kRegisterRequest;
}
void Request::set_has_register_request() {
  _oneof_case_[0] = kRegisterRequest;
}
void Request::clear_register_request() {
  if (has_register_request()) {
    delete msg_.register_request_;
    clear_has_msg();
  }
}
 const ::elegram::RegisterRequest& Request::register_request() const {
  // @@protoc_insertion_point(field_get:elegram.Request.register_request)
  return has_register_request()
      ? *msg_.register_request_
      : ::elegram::RegisterRequest::default_instance();
}
::elegram::RegisterRequest* Request::mutable_register_request() {
  if (!has_register_request()) {
    clear_msg();
    set_has_register_request();
    msg_.register_request_ = new ::elegram::RegisterRequest;
  }
  // @@protoc_insertion_point(field_mutable:elegram.Request.register_request)
  return msg_.register_request_;
}
::elegram::RegisterRequest* Request::release_register_request() {
  // @@protoc_insertion_point(field_release:elegram.Request.register_request)
  if (has_register_request()) {
    clear_has_msg();
    ::elegram::RegisterRequest* temp = msg_.register_request_;
    msg_.register_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_register_request(::elegram::RegisterRequest* register_request) {
  clear_msg();
  if (register_request) {
    set_has_register_request();
    msg_.register_request_ = register_request;
  }
  // @@protoc_insertion_point(field_set_allocated:elegram.Request.register_request)
}

// optional .elegram.LoginRequest login_request = 2;
bool Request::has_login_request() const {
  return msg_case() == kLoginRequest;
}
void Request::set_has_login_request() {
  _oneof_case_[0] = kLoginRequest;
}
void Request::clear_login_request() {
  if (has_login_request()) {
    delete msg_.login_request_;
    clear_has_msg();
  }
}
 const ::elegram::LoginRequest& Request::login_request() const {
  // @@protoc_insertion_point(field_get:elegram.Request.login_request)
  return has_login_request()
      ? *msg_.login_request_
      : ::elegram::LoginRequest::default_instance();
}
::elegram::LoginRequest* Request::mutable_login_request() {
  if (!has_login_request()) {
    clear_msg();
    set_has_login_request();
    msg_.login_request_ = new ::elegram::LoginRequest;
  }
  // @@protoc_insertion_point(field_mutable:elegram.Request.login_request)
  return msg_.login_request_;
}
::elegram::LoginRequest* Request::release_login_request() {
  // @@protoc_insertion_point(field_release:elegram.Request.login_request)
  if (has_login_request()) {
    clear_has_msg();
    ::elegram::LoginRequest* temp = msg_.login_request_;
    msg_.login_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_login_request(::elegram::LoginRequest* login_request) {
  clear_msg();
  if (login_request) {
    set_has_login_request();
    msg_.login_request_ = login_request;
  }
  // @@protoc_insertion_point(field_set_allocated:elegram.Request.login_request)
}

// optional .elegram.AllMyChatsRequest chats_request = 3;
bool Request::has_chats_request() const {
  return msg_case() == kChatsRequest;
}
void Request::set_has_chats_request() {
  _oneof_case_[0] = kChatsRequest;
}
void Request::clear_chats_request() {
  if (has_chats_request()) {
    delete msg_.chats_request_;
    clear_has_msg();
  }
}
 const ::elegram::AllMyChatsRequest& Request::chats_request() const {
  // @@protoc_insertion_point(field_get:elegram.Request.chats_request)
  return has_chats_request()
      ? *msg_.chats_request_
      : ::elegram::AllMyChatsRequest::default_instance();
}
::elegram::AllMyChatsRequest* Request::mutable_chats_request() {
  if (!has_chats_request()) {
    clear_msg();
    set_has_chats_request();
    msg_.chats_request_ = new ::elegram::AllMyChatsRequest;
  }
  // @@protoc_insertion_point(field_mutable:elegram.Request.chats_request)
  return msg_.chats_request_;
}
::elegram::AllMyChatsRequest* Request::release_chats_request() {
  // @@protoc_insertion_point(field_release:elegram.Request.chats_request)
  if (has_chats_request()) {
    clear_has_msg();
    ::elegram::AllMyChatsRequest* temp = msg_.chats_request_;
    msg_.chats_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_chats_request(::elegram::AllMyChatsRequest* chats_request) {
  clear_msg();
  if (chats_request) {
    set_has_chats_request();
    msg_.chats_request_ = chats_request;
  }
  // @@protoc_insertion_point(field_set_allocated:elegram.Request.chats_request)
}

// optional .elegram.AllMyContactsRequest contacts_request = 4;
bool Request::has_contacts_request() const {
  return msg_case() == kContactsRequest;
}
void Request::set_has_contacts_request() {
  _oneof_case_[0] = kContactsRequest;
}
void Request::clear_contacts_request() {
  if (has_contacts_request()) {
    delete msg_.contacts_request_;
    clear_has_msg();
  }
}
 const ::elegram::AllMyContactsRequest& Request::contacts_request() const {
  // @@protoc_insertion_point(field_get:elegram.Request.contacts_request)
  return has_contacts_request()
      ? *msg_.contacts_request_
      : ::elegram::AllMyContactsRequest::default_instance();
}
::elegram::AllMyContactsRequest* Request::mutable_contacts_request() {
  if (!has_contacts_request()) {
    clear_msg();
    set_has_contacts_request();
    msg_.contacts_request_ = new ::elegram::AllMyContactsRequest;
  }
  // @@protoc_insertion_point(field_mutable:elegram.Request.contacts_request)
  return msg_.contacts_request_;
}
::elegram::AllMyContactsRequest* Request::release_contacts_request() {
  // @@protoc_insertion_point(field_release:elegram.Request.contacts_request)
  if (has_contacts_request()) {
    clear_has_msg();
    ::elegram::AllMyContactsRequest* temp = msg_.contacts_request_;
    msg_.contacts_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_contacts_request(::elegram::AllMyContactsRequest* contacts_request) {
  clear_msg();
  if (contacts_request) {
    set_has_contacts_request();
    msg_.contacts_request_ = contacts_request;
  }
  // @@protoc_insertion_point(field_set_allocated:elegram.Request.contacts_request)
}

// optional .elegram.MessagesRequest messages_request = 5;
bool Request::has_messages_request() const {
  return msg_case() == kMessagesRequest;
}
void Request::set_has_messages_request() {
  _oneof_case_[0] = kMessagesRequest;
}
void Request::clear_messages_request() {
  if (has_messages_request()) {
    delete msg_.messages_request_;
    clear_has_msg();
  }
}
 const ::elegram::MessagesRequest& Request::messages_request() const {
  // @@protoc_insertion_point(field_get:elegram.Request.messages_request)
  return has_messages_request()
      ? *msg_.messages_request_
      : ::elegram::MessagesRequest::default_instance();
}
::elegram::MessagesRequest* Request::mutable_messages_request() {
  if (!has_messages_request()) {
    clear_msg();
    set_has_messages_request();
    msg_.messages_request_ = new ::elegram::MessagesRequest;
  }
  // @@protoc_insertion_point(field_mutable:elegram.Request.messages_request)
  return msg_.messages_request_;
}
::elegram::MessagesRequest* Request::release_messages_request() {
  // @@protoc_insertion_point(field_release:elegram.Request.messages_request)
  if (has_messages_request()) {
    clear_has_msg();
    ::elegram::MessagesRequest* temp = msg_.messages_request_;
    msg_.messages_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_messages_request(::elegram::MessagesRequest* messages_request) {
  clear_msg();
  if (messages_request) {
    set_has_messages_request();
    msg_.messages_request_ = messages_request;
  }
  // @@protoc_insertion_point(field_set_allocated:elegram.Request.messages_request)
}

// optional .elegram.SendMessageRequest send_mesg_request = 6;
bool Request::has_send_mesg_request() const {
  return msg_case() == kSendMesgRequest;
}
void Request::set_has_send_mesg_request() {
  _oneof_case_[0] = kSendMesgRequest;
}
void Request::clear_send_mesg_request() {
  if (has_send_mesg_request()) {
    delete msg_.send_mesg_request_;
    clear_has_msg();
  }
}
 const ::elegram::SendMessageRequest& Request::send_mesg_request() const {
  // @@protoc_insertion_point(field_get:elegram.Request.send_mesg_request)
  return has_send_mesg_request()
      ? *msg_.send_mesg_request_
      : ::elegram::SendMessageRequest::default_instance();
}
::elegram::SendMessageRequest* Request::mutable_send_mesg_request() {
  if (!has_send_mesg_request()) {
    clear_msg();
    set_has_send_mesg_request();
    msg_.send_mesg_request_ = new ::elegram::SendMessageRequest;
  }
  // @@protoc_insertion_point(field_mutable:elegram.Request.send_mesg_request)
  return msg_.send_mesg_request_;
}
::elegram::SendMessageRequest* Request::release_send_mesg_request() {
  // @@protoc_insertion_point(field_release:elegram.Request.send_mesg_request)
  if (has_send_mesg_request()) {
    clear_has_msg();
    ::elegram::SendMessageRequest* temp = msg_.send_mesg_request_;
    msg_.send_mesg_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_send_mesg_request(::elegram::SendMessageRequest* send_mesg_request) {
  clear_msg();
  if (send_mesg_request) {
    set_has_send_mesg_request();
    msg_.send_mesg_request_ = send_mesg_request;
  }
  // @@protoc_insertion_point(field_set_allocated:elegram.Request.send_mesg_request)
}

bool Request::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
void Request::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
Request::MsgCase Request::msg_case() const {
  return Request::MsgCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

  const ::google::protobuf::EnumDescriptor *StatusResponse_RESULT_descriptor() {
      protobuf_AssignDescriptorsOnce();
      return StatusResponse_RESULT_descriptor_;
  }
  bool StatusResponse_RESULT_IsValid(int value) {
      switch (value) {
          case 0:
          case 1:return true;
          default:return false;
      }
  }

#if !defined(_MSC_VER) || _MSC_VER >= 1900
  const StatusResponse_RESULT StatusResponse::ACCEPTED;
  const StatusResponse_RESULT StatusResponse::REJECTED;
  const StatusResponse_RESULT StatusResponse::RESULT_MIN;
  const StatusResponse_RESULT StatusResponse::RESULT_MAX;
  const int StatusResponse::RESULT_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
  const int StatusResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

  StatusResponse::StatusResponse()
      : ::google::protobuf::Message(), _internal_metadata_(NULL) {
      SharedCtor();
      // @@protoc_insertion_point(constructor:elegram.StatusResponse)
  }

  void StatusResponse::InitAsDefaultInstance() {
      _is_default_instance_ = true;
  }

  StatusResponse::StatusResponse(const StatusResponse &from)
      : ::google::protobuf::Message(),
        _internal_metadata_(NULL) {
      SharedCtor();
      MergeFrom(from);
      // @@protoc_insertion_point(copy_constructor:elegram.StatusResponse)
  }

  void StatusResponse::SharedCtor() {
      _is_default_instance_ = false;
      _cached_size_ = 0;
      result_ = 0;
  }

  StatusResponse::~StatusResponse() {
      // @@protoc_insertion_point(destructor:elegram.StatusResponse)
      SharedDtor();
  }

  void StatusResponse::SharedDtor() {
      if (this != default_instance_) {
      }
  }

  void StatusResponse::SetCachedSize(int size) const {
      GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
      _cached_size_ = size;
      GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor *StatusResponse::descriptor() {
      protobuf_AssignDescriptorsOnce();
      return StatusResponse_descriptor_;
  }

  const StatusResponse &StatusResponse::default_instance() {
      if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
      return *default_instance_;
  }

  StatusResponse *StatusResponse::default_instance_ = NULL;

  StatusResponse *StatusResponse::New(::google::protobuf::Arena *arena) const {
      StatusResponse *n = new StatusResponse;
      if (arena != NULL) {
          arena->Own(n);
      }
      return n;
  }

  void StatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:elegram.StatusResponse)
      result_ = 0;
  }

  bool StatusResponse::MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
      ::google::protobuf::uint32 tag;
      // @@protoc_insertion_point(parse_start:elegram.StatusResponse)
      for (;;) {
          ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
          tag = p.first;
          if (!p.second) goto handle_unusual;
          switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
              // optional .elegram.StatusResponse.RESULT result = 1;
              case 1: {
                  if (tag == 8) {
                      int value;
                      DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                          int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                          input, &value)));
                      set_result(static_cast< ::elegram::StatusResponse_RESULT >(value));
                  } else {
                      goto handle_unusual;
                  }
                  if (input->ExpectAtEnd()) goto success;
                  break;
              }

              default: {
                    handle_unusual:
                  if (tag == 0 ||
                      ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                          ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                      goto success;
                  }
                  DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                  break;
              }
          }
      }
        success:
      // @@protoc_insertion_point(parse_success:elegram.StatusResponse)
      return true;
        failure:
      // @@protoc_insertion_point(parse_failure:elegram.StatusResponse)
      return false;
#undef DO_
  }

  void StatusResponse::SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream *output) const {
      // @@protoc_insertion_point(serialize_start:elegram.StatusResponse)
      // optional .elegram.StatusResponse.RESULT result = 1;
      if (this->result() != 0) {
          ::google::protobuf::internal::WireFormatLite::WriteEnum(
              1, this->result(), output);
      }

      // @@protoc_insertion_point(serialize_end:elegram.StatusResponse)
  }

  ::google::protobuf::uint8 *StatusResponse::InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8 *target) const {
      // @@protoc_insertion_point(serialize_to_array_start:elegram.StatusResponse)
      // optional .elegram.StatusResponse.RESULT result = 1;
      if (this->result() != 0) {
          target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
              1, this->result(), target);
      }

      // @@protoc_insertion_point(serialize_to_array_end:elegram.StatusResponse)
      return target;
  }

  int StatusResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:elegram.StatusResponse)
      int total_size = 0;

      // optional .elegram.StatusResponse.RESULT result = 1;
      if (this->result() != 0) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
      }

      GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
      _cached_size_ = total_size;
      GOOGLE_SAFE_CONCURRENT_WRITES_END();
      return total_size;
  }

  void StatusResponse::MergeFrom(const ::google::protobuf::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:elegram.StatusResponse)
      if (GOOGLE_PREDICT_FALSE(&from == this)) {
          ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
      }
      const StatusResponse *source =
          ::google::protobuf::internal::DynamicCastToGenerated<const StatusResponse>(
              &from);
      if (source == NULL) {
          // @@protoc_insertion_point(generalized_merge_from_cast_fail:elegram.StatusResponse)
          ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      } else {
          // @@protoc_insertion_point(generalized_merge_from_cast_success:elegram.StatusResponse)
          MergeFrom(*source);
      }
  }

  void StatusResponse::MergeFrom(const StatusResponse &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:elegram.StatusResponse)
      if (GOOGLE_PREDICT_FALSE(&from == this)) {
          ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
      }
      if (from.result() != 0) {
          set_result(from.result());
      }
  }

  void StatusResponse::CopyFrom(const ::google::protobuf::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:elegram.StatusResponse)
      if (&from == this) return;
      Clear();
      MergeFrom(from);
  }

  void StatusResponse::CopyFrom(const StatusResponse &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:elegram.StatusResponse)
      if (&from == this) return;
      Clear();
      MergeFrom(from);
  }

  bool StatusResponse::IsInitialized() const {

      return true;
  }

  void StatusResponse::Swap(StatusResponse *other) {
      if (other == this) return;
      InternalSwap(other);
  }
  void StatusResponse::InternalSwap(StatusResponse *other) {
      std::swap(result_, other->result_);
      _internal_metadata_.Swap(&other->_internal_metadata_);
      std::swap(_cached_size_, other->_cached_size_);
  }

  ::google::protobuf::Metadata StatusResponse::GetMetadata() const {
      protobuf_AssignDescriptorsOnce();
      ::google::protobuf::Metadata metadata;
      metadata.descriptor = StatusResponse_descriptor_;
      metadata.reflection = StatusResponse_reflection_;
      return metadata;
  }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
                                                                                                                          // StatusResponse

// optional .elegram.StatusResponse.RESULT result = 1;
void StatusResponse::clear_result() {
  result_ = 0;
}
 ::elegram::StatusResponse_RESULT StatusResponse::result() const {
  // @@protoc_insertion_point(field_get:elegram.StatusResponse.result)
  return static_cast< ::elegram::StatusResponse_RESULT >(result_);
}
 void StatusResponse::set_result(::elegram::StatusResponse_RESULT value) {

  result_ = value;
  // @@protoc_insertion_point(field_set:elegram.StatusResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
  const int Chat::kChatIdFieldNumber;
  const int Chat::kTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

  Chat::Chat()
      : ::google::protobuf::Message(), _internal_metadata_(NULL) {
      SharedCtor();
      // @@protoc_insertion_point(constructor:elegram.Chat)
  }

  void Chat::InitAsDefaultInstance() {
      _is_default_instance_ = true;
  }

  Chat::Chat(const Chat &from)
      : ::google::protobuf::Message(),
        _internal_metadata_(NULL) {
      SharedCtor();
      MergeFrom(from);
      // @@protoc_insertion_point(copy_constructor:elegram.Chat)
  }

  void Chat::SharedCtor() {
      _is_default_instance_ = false;
      ::google::protobuf::internal::GetEmptyString();
      _cached_size_ = 0;
      chat_id_ = GOOGLE_ULONGLONG(0);
      title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  Chat::~Chat() {
      // @@protoc_insertion_point(destructor:elegram.Chat)
      SharedDtor();
  }

  void Chat::SharedDtor() {
      title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      if (this != default_instance_) {
      }
  }

  void Chat::SetCachedSize(int size) const {
      GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
      _cached_size_ = size;
      GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor *Chat::descriptor() {
      protobuf_AssignDescriptorsOnce();
      return Chat_descriptor_;
  }

  const Chat &Chat::default_instance() {
      if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
      return *default_instance_;
  }

  Chat *Chat::default_instance_ = NULL;

  Chat *Chat::New(::google::protobuf::Arena *arena) const {
      Chat *n = new Chat;
      if (arena != NULL) {
          arena->Own(n);
      }
      return n;
  }

  void Chat::Clear() {
// @@protoc_insertion_point(message_clear_start:elegram.Chat)
      chat_id_ = GOOGLE_ULONGLONG(0);
      title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  bool Chat::MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
      ::google::protobuf::uint32 tag;
      // @@protoc_insertion_point(parse_start:elegram.Chat)
      for (;;) {
          ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
          tag = p.first;
          if (!p.second) goto handle_unusual;
          switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
              // optional uint64 chat_id = 1;
              case 1: {
                  if (tag == 8) {
                      DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                          ::google::protobuf::uint64,
                          ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                          input, &chat_id_)));

                  } else {
                      goto handle_unusual;
                  }
                  if (input->ExpectTag(18)) goto parse_title;
                  break;
              }

                  // optional string title = 2;
              case 2: {
                  if (tag == 18) {
                        parse_title:
                      DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                          input, this->mutable_title()));
                      DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                          this->title().data(), this->title().length(),
                          ::google::protobuf::internal::WireFormatLite::PARSE,
                          "elegram.Chat.title"));
                  } else {
                      goto handle_unusual;
                  }
                  if (input->ExpectAtEnd()) goto success;
                  break;
              }

              default: {
                    handle_unusual:
                  if (tag == 0 ||
                      ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                          ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                      goto success;
                  }
                  DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                  break;
              }
          }
      }
        success:
      // @@protoc_insertion_point(parse_success:elegram.Chat)
      return true;
        failure:
      // @@protoc_insertion_point(parse_failure:elegram.Chat)
      return false;
#undef DO_
  }

  void Chat::SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream *output) const {
      // @@protoc_insertion_point(serialize_start:elegram.Chat)
      // optional uint64 chat_id = 1;
      if (this->chat_id() != 0) {
          ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_id(), output);
      }

      // optional string title = 2;
      if (this->title().size() > 0) {
          ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->title().data(), this->title().length(),
              ::google::protobuf::internal::WireFormatLite::SERIALIZE,
              "elegram.Chat.title");
          ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
              2, this->title(), output);
      }

      // @@protoc_insertion_point(serialize_end:elegram.Chat)
  }

  ::google::protobuf::uint8 *Chat::InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8 *target) const {
      // @@protoc_insertion_point(serialize_to_array_start:elegram.Chat)
      // optional uint64 chat_id = 1;
      if (this->chat_id() != 0) {
          target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1,
                                                                                    this->chat_id(),
                                                                                    target);
      }

      // optional string title = 2;
      if (this->title().size() > 0) {
          ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->title().data(), this->title().length(),
              ::google::protobuf::internal::WireFormatLite::SERIALIZE,
              "elegram.Chat.title");
          target =
              ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                  2, this->title(), target);
      }

      // @@protoc_insertion_point(serialize_to_array_end:elegram.Chat)
      return target;
  }

  int Chat::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:elegram.Chat)
      int total_size = 0;

      // optional uint64 chat_id = 1;
      if (this->chat_id() != 0) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::UInt64Size(
                  this->chat_id());
      }

      // optional string title = 2;
      if (this->title().size() > 0) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::StringSize(
                  this->title());
      }

      GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
      _cached_size_ = total_size;
      GOOGLE_SAFE_CONCURRENT_WRITES_END();
      return total_size;
  }

  void Chat::MergeFrom(const ::google::protobuf::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:elegram.Chat)
      if (GOOGLE_PREDICT_FALSE(&from == this)) {
          ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
      }
      const Chat *source =
          ::google::protobuf::internal::DynamicCastToGenerated<const Chat>(
              &from);
      if (source == NULL) {
          // @@protoc_insertion_point(generalized_merge_from_cast_fail:elegram.Chat)
          ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      } else {
          // @@protoc_insertion_point(generalized_merge_from_cast_success:elegram.Chat)
          MergeFrom(*source);
      }
  }

  void Chat::MergeFrom(const Chat &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:elegram.Chat)
      if (GOOGLE_PREDICT_FALSE(&from == this)) {
          ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
      }
      if (from.chat_id() != 0) {
          set_chat_id(from.chat_id());
      }
      if (from.title().size() > 0) {

          title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                                   from.title_);
      }
  }

  void Chat::CopyFrom(const ::google::protobuf::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:elegram.Chat)
      if (&from == this) return;
      Clear();
      MergeFrom(from);
  }

  void Chat::CopyFrom(const Chat &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:elegram.Chat)
      if (&from == this) return;
      Clear();
      MergeFrom(from);
  }

  bool Chat::IsInitialized() const {

      return true;
  }

  void Chat::Swap(Chat *other) {
      if (other == this) return;
      InternalSwap(other);
  }
  void Chat::InternalSwap(Chat *other) {
      std::swap(chat_id_, other->chat_id_);
      title_.Swap(&other->title_);
      _internal_metadata_.Swap(&other->_internal_metadata_);
      std::swap(_cached_size_, other->_cached_size_);
  }

  ::google::protobuf::Metadata Chat::GetMetadata() const {
      protobuf_AssignDescriptorsOnce();
      ::google::protobuf::Metadata metadata;
      metadata.descriptor = Chat_descriptor_;
      metadata.reflection = Chat_reflection_;
      return metadata;
  }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
                                                                                                                          // Chat

// optional uint64 chat_id = 1;
void Chat::clear_chat_id() {
  chat_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Chat::chat_id() const {
  // @@protoc_insertion_point(field_get:elegram.Chat.chat_id)
  return chat_id_;
}
 void Chat::set_chat_id(::google::protobuf::uint64 value) {

  chat_id_ = value;
  // @@protoc_insertion_point(field_set:elegram.Chat.chat_id)
}

// optional string title = 2;
void Chat::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Chat::title() const {
  // @@protoc_insertion_point(field_get:elegram.Chat.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Chat::set_title(const ::std::string& value) {

  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:elegram.Chat.title)
}
 void Chat::set_title(const char* value) {

  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:elegram.Chat.title)
}
 void Chat::set_title(const char* value, size_t size) {

  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:elegram.Chat.title)
}
 ::std::string* Chat::mutable_title() {

  // @@protoc_insertion_point(field_mutable:elegram.Chat.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Chat::release_title() {
  // @@protoc_insertion_point(field_release:elegram.Chat.title)

  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Chat::set_allocated_title(::std::string* title) {
  if (title != NULL) {

  } else {

  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:elegram.Chat.title)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
  const int ChatsResponse::kChatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

  ChatsResponse::ChatsResponse()
      : ::google::protobuf::Message(), _internal_metadata_(NULL) {
      SharedCtor();
      // @@protoc_insertion_point(constructor:elegram.ChatsResponse)
  }

  void ChatsResponse::InitAsDefaultInstance() {
      _is_default_instance_ = true;
  }

  ChatsResponse::ChatsResponse(const ChatsResponse &from)
      : ::google::protobuf::Message(),
        _internal_metadata_(NULL) {
      SharedCtor();
      MergeFrom(from);
      // @@protoc_insertion_point(copy_constructor:elegram.ChatsResponse)
  }

  void ChatsResponse::SharedCtor() {
      _is_default_instance_ = false;
      _cached_size_ = 0;
  }

  ChatsResponse::~ChatsResponse() {
      // @@protoc_insertion_point(destructor:elegram.ChatsResponse)
      SharedDtor();
  }

  void ChatsResponse::SharedDtor() {
      if (this != default_instance_) {
      }
  }

  void ChatsResponse::SetCachedSize(int size) const {
      GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
      _cached_size_ = size;
      GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor *ChatsResponse::descriptor() {
      protobuf_AssignDescriptorsOnce();
      return ChatsResponse_descriptor_;
  }

  const ChatsResponse &ChatsResponse::default_instance() {
      if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
      return *default_instance_;
  }

  ChatsResponse *ChatsResponse::default_instance_ = NULL;

  ChatsResponse *ChatsResponse::New(::google::protobuf::Arena *arena) const {
      ChatsResponse *n = new ChatsResponse;
      if (arena != NULL) {
          arena->Own(n);
      }
      return n;
  }

  void ChatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:elegram.ChatsResponse)
      chats_.Clear();
  }

  bool ChatsResponse::MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
      ::google::protobuf::uint32 tag;
      // @@protoc_insertion_point(parse_start:elegram.ChatsResponse)
      for (;;) {
          ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
          tag = p.first;
          if (!p.second) goto handle_unusual;
          switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
              // repeated .elegram.Chat chats = 1;
              case 1: {
                  if (tag == 10) {
                      DO_(input->IncrementRecursionDepth());
                        parse_loop_chats:
                      DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                          input, add_chats()));
                  } else {
                      goto handle_unusual;
                  }
                  if (input->ExpectTag(10)) goto parse_loop_chats;
                  input->UnsafeDecrementRecursionDepth();
                  if (input->ExpectAtEnd()) goto success;
                  break;
              }

              default: {
                    handle_unusual:
                  if (tag == 0 ||
                      ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                          ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                      goto success;
                  }
                  DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                  break;
              }
          }
      }
        success:
      // @@protoc_insertion_point(parse_success:elegram.ChatsResponse)
      return true;
        failure:
      // @@protoc_insertion_point(parse_failure:elegram.ChatsResponse)
      return false;
#undef DO_
  }

  void ChatsResponse::SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream *output) const {
      // @@protoc_insertion_point(serialize_start:elegram.ChatsResponse)
      // repeated .elegram.Chat chats = 1;
      for (unsigned int i = 0, n = this->chats_size(); i < n; i++) {
          ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
              1, this->chats(i), output);
      }

      // @@protoc_insertion_point(serialize_end:elegram.ChatsResponse)
  }

  ::google::protobuf::uint8 *ChatsResponse::InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8 *target) const {
      // @@protoc_insertion_point(serialize_to_array_start:elegram.ChatsResponse)
      // repeated .elegram.Chat chats = 1;
      for (unsigned int i = 0, n = this->chats_size(); i < n; i++) {
          target = ::google::protobuf::internal::WireFormatLite::
          InternalWriteMessageNoVirtualToArray(
              1, this->chats(i), false, target);
      }

      // @@protoc_insertion_point(serialize_to_array_end:elegram.ChatsResponse)
      return target;
  }

  int ChatsResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:elegram.ChatsResponse)
      int total_size = 0;

      // repeated .elegram.Chat chats = 1;
      total_size += 1 * this->chats_size();
      for (int i = 0; i < this->chats_size(); i++) {
          total_size +=
              ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                  this->chats(i));
      }

      GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
      _cached_size_ = total_size;
      GOOGLE_SAFE_CONCURRENT_WRITES_END();
      return total_size;
  }

  void ChatsResponse::MergeFrom(const ::google::protobuf::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:elegram.ChatsResponse)
      if (GOOGLE_PREDICT_FALSE(&from == this)) {
          ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
      }
      const ChatsResponse *source =
          ::google::protobuf::internal::DynamicCastToGenerated<const ChatsResponse>(
              &from);
      if (source == NULL) {
          // @@protoc_insertion_point(generalized_merge_from_cast_fail:elegram.ChatsResponse)
          ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      } else {
          // @@protoc_insertion_point(generalized_merge_from_cast_success:elegram.ChatsResponse)
          MergeFrom(*source);
      }
  }

  void ChatsResponse::MergeFrom(const ChatsResponse &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:elegram.ChatsResponse)
      if (GOOGLE_PREDICT_FALSE(&from == this)) {
          ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
      }
      chats_.MergeFrom(from.chats_);
  }

  void ChatsResponse::CopyFrom(const ::google::protobuf::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:elegram.ChatsResponse)
      if (&from == this) return;
      Clear();
      MergeFrom(from);
  }

  void ChatsResponse::CopyFrom(const ChatsResponse &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:elegram.ChatsResponse)
      if (&from == this) return;
      Clear();
      MergeFrom(from);
  }

  bool ChatsResponse::IsInitialized() const {

      return true;
  }

  void ChatsResponse::Swap(ChatsResponse *other) {
      if (other == this) return;
      InternalSwap(other);
  }
  void ChatsResponse::InternalSwap(ChatsResponse *other) {
      chats_.UnsafeArenaSwap(&other->chats_);
      _internal_metadata_.Swap(&other->_internal_metadata_);
      std::swap(_cached_size_, other->_cached_size_);
  }

  ::google::protobuf::Metadata ChatsResponse::GetMetadata() const {
      protobuf_AssignDescriptorsOnce();
      ::google::protobuf::Metadata metadata;
      metadata.descriptor = ChatsResponse_descriptor_;
      metadata.reflection = ChatsResponse_reflection_;
      return metadata;
  }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
                                                                                                                          // ChatsResponse

// repeated .elegram.Chat chats = 1;
int ChatsResponse::chats_size() const {
  return chats_.size();
}
void ChatsResponse::clear_chats() {
  chats_.Clear();
}
const ::elegram::Chat& ChatsResponse::chats(int index) const {
  // @@protoc_insertion_point(field_get:elegram.ChatsResponse.chats)
  return chats_.Get(index);
}
::elegram::Chat* ChatsResponse::mutable_chats(int index) {
  // @@protoc_insertion_point(field_mutable:elegram.ChatsResponse.chats)
  return chats_.Mutable(index);
}
::elegram::Chat* ChatsResponse::add_chats() {
  // @@protoc_insertion_point(field_add:elegram.ChatsResponse.chats)
  return chats_.Add();
}
::google::protobuf::RepeatedPtrField< ::elegram::Chat >*
ChatsResponse::mutable_chats() {
  // @@protoc_insertion_point(field_mutable_list:elegram.ChatsResponse.chats)
  return &chats_;
}
const ::google::protobuf::RepeatedPtrField< ::elegram::Chat >&
ChatsResponse::chats() const {
  // @@protoc_insertion_point(field_list:elegram.ChatsResponse.chats)
  return chats_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
  const int Contact::kNameFieldNumber;
  const int Contact::kEmailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

  Contact::Contact()
      : ::google::protobuf::Message(), _internal_metadata_(NULL) {
      SharedCtor();
      // @@protoc_insertion_point(constructor:elegram.Contact)
  }

  void Contact::InitAsDefaultInstance() {
      _is_default_instance_ = true;
  }

  Contact::Contact(const Contact &from)
      : ::google::protobuf::Message(),
        _internal_metadata_(NULL) {
      SharedCtor();
      MergeFrom(from);
      // @@protoc_insertion_point(copy_constructor:elegram.Contact)
  }

  void Contact::SharedCtor() {
      _is_default_instance_ = false;
      ::google::protobuf::internal::GetEmptyString();
      _cached_size_ = 0;
      name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  Contact::~Contact() {
      // @@protoc_insertion_point(destructor:elegram.Contact)
      SharedDtor();
  }

  void Contact::SharedDtor() {
      name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      if (this != default_instance_) {
      }
  }

  void Contact::SetCachedSize(int size) const {
      GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
      _cached_size_ = size;
      GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor *Contact::descriptor() {
      protobuf_AssignDescriptorsOnce();
      return Contact_descriptor_;
  }

  const Contact &Contact::default_instance() {
      if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
      return *default_instance_;
  }

  Contact *Contact::default_instance_ = NULL;

  Contact *Contact::New(::google::protobuf::Arena *arena) const {
      Contact *n = new Contact;
      if (arena != NULL) {
          arena->Own(n);
      }
      return n;
  }

  void Contact::Clear() {
// @@protoc_insertion_point(message_clear_start:elegram.Contact)
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  bool Contact::MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
      ::google::protobuf::uint32 tag;
      // @@protoc_insertion_point(parse_start:elegram.Contact)
      for (;;) {
          ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
          tag = p.first;
          if (!p.second) goto handle_unusual;
          switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
              // optional string name = 1;
              case 1: {
                  if (tag == 10) {
                      DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                          input, this->mutable_name()));
                      DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                          this->name().data(), this->name().length(),
                          ::google::protobuf::internal::WireFormatLite::PARSE,
                          "elegram.Contact.name"));
                  } else {
                      goto handle_unusual;
                  }
                  if (input->ExpectTag(18)) goto parse_email;
                  break;
              }

                  // optional string email = 2;
              case 2: {
                  if (tag == 18) {
                        parse_email:
                      DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                          input, this->mutable_email()));
                      DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                          this->email().data(), this->email().length(),
                          ::google::protobuf::internal::WireFormatLite::PARSE,
                          "elegram.Contact.email"));
                  } else {
                      goto handle_unusual;
                  }
                  if (input->ExpectAtEnd()) goto success;
                  break;
              }

              default: {
                    handle_unusual:
                  if (tag == 0 ||
                      ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                          ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                      goto success;
                  }
                  DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                  break;
              }
          }
      }
        success:
      // @@protoc_insertion_point(parse_success:elegram.Contact)
      return true;
        failure:
      // @@protoc_insertion_point(parse_failure:elegram.Contact)
      return false;
#undef DO_
  }

  void Contact::SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream *output) const {
      // @@protoc_insertion_point(serialize_start:elegram.Contact)
      // optional string name = 1;
      if (this->name().size() > 0) {
          ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->name().data(), this->name().length(),
              ::google::protobuf::internal::WireFormatLite::SERIALIZE,
              "elegram.Contact.name");
          ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
              1, this->name(), output);
      }

      // optional string email = 2;
      if (this->email().size() > 0) {
          ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->email().data(), this->email().length(),
              ::google::protobuf::internal::WireFormatLite::SERIALIZE,
              "elegram.Contact.email");
          ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
              2, this->email(), output);
      }

      // @@protoc_insertion_point(serialize_end:elegram.Contact)
  }

  ::google::protobuf::uint8 *Contact::InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8 *target) const {
      // @@protoc_insertion_point(serialize_to_array_start:elegram.Contact)
      // optional string name = 1;
      if (this->name().size() > 0) {
          ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->name().data(), this->name().length(),
              ::google::protobuf::internal::WireFormatLite::SERIALIZE,
              "elegram.Contact.name");
          target =
              ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                  1, this->name(), target);
      }

      // optional string email = 2;
      if (this->email().size() > 0) {
          ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->email().data(), this->email().length(),
              ::google::protobuf::internal::WireFormatLite::SERIALIZE,
              "elegram.Contact.email");
          target =
              ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                  2, this->email(), target);
      }

      // @@protoc_insertion_point(serialize_to_array_end:elegram.Contact)
      return target;
  }

  int Contact::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:elegram.Contact)
      int total_size = 0;

      // optional string name = 1;
      if (this->name().size() > 0) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::StringSize(
                  this->name());
      }

      // optional string email = 2;
      if (this->email().size() > 0) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::StringSize(
                  this->email());
      }

      GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
      _cached_size_ = total_size;
      GOOGLE_SAFE_CONCURRENT_WRITES_END();
      return total_size;
  }

  void Contact::MergeFrom(const ::google::protobuf::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:elegram.Contact)
      if (GOOGLE_PREDICT_FALSE(&from == this)) {
          ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
      }
      const Contact *source =
          ::google::protobuf::internal::DynamicCastToGenerated<const Contact>(
              &from);
      if (source == NULL) {
          // @@protoc_insertion_point(generalized_merge_from_cast_fail:elegram.Contact)
          ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      } else {
          // @@protoc_insertion_point(generalized_merge_from_cast_success:elegram.Contact)
          MergeFrom(*source);
      }
  }

  void Contact::MergeFrom(const Contact &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:elegram.Contact)
      if (GOOGLE_PREDICT_FALSE(&from == this)) {
          ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
      }
      if (from.name().size() > 0) {

          name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                                  from.name_);
      }
      if (from.email().size() > 0) {

          email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                                   from.email_);
      }
  }

  void Contact::CopyFrom(const ::google::protobuf::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:elegram.Contact)
      if (&from == this) return;
      Clear();
      MergeFrom(from);
  }

  void Contact::CopyFrom(const Contact &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:elegram.Contact)
      if (&from == this) return;
      Clear();
      MergeFrom(from);
  }

  bool Contact::IsInitialized() const {

      return true;
  }

  void Contact::Swap(Contact *other) {
      if (other == this) return;
      InternalSwap(other);
  }
  void Contact::InternalSwap(Contact *other) {
      name_.Swap(&other->name_);
      email_.Swap(&other->email_);
      _internal_metadata_.Swap(&other->_internal_metadata_);
      std::swap(_cached_size_, other->_cached_size_);
  }

  ::google::protobuf::Metadata Contact::GetMetadata() const {
      protobuf_AssignDescriptorsOnce();
      ::google::protobuf::Metadata metadata;
      metadata.descriptor = Contact_descriptor_;
      metadata.reflection = Contact_reflection_;
      return metadata;
  }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
                                                                                                                          // Contact

// optional string name = 1;
void Contact::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Contact::name() const {
  // @@protoc_insertion_point(field_get:elegram.Contact.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Contact::set_name(const ::std::string& value) {

  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:elegram.Contact.name)
}
 void Contact::set_name(const char* value) {

  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:elegram.Contact.name)
}
 void Contact::set_name(const char* value, size_t size) {

  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:elegram.Contact.name)
}
 ::std::string* Contact::mutable_name() {

  // @@protoc_insertion_point(field_mutable:elegram.Contact.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Contact::release_name() {
  // @@protoc_insertion_point(field_release:elegram.Contact.name)

  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Contact::set_allocated_name(::std::string* name) {
  if (name != NULL) {

  } else {

  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:elegram.Contact.name)
}

// optional string email = 2;
void Contact::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Contact::email() const {
  // @@protoc_insertion_point(field_get:elegram.Contact.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Contact::set_email(const ::std::string& value) {

  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:elegram.Contact.email)
}
 void Contact::set_email(const char* value) {

  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:elegram.Contact.email)
}
 void Contact::set_email(const char* value, size_t size) {

  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:elegram.Contact.email)
}
 ::std::string* Contact::mutable_email() {

  // @@protoc_insertion_point(field_mutable:elegram.Contact.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Contact::release_email() {
  // @@protoc_insertion_point(field_release:elegram.Contact.email)

  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Contact::set_allocated_email(::std::string* email) {
  if (email != NULL) {

  } else {

  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:elegram.Contact.email)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
  const int ContactsResponse::kContactsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

  ContactsResponse::ContactsResponse()
      : ::google::protobuf::Message(), _internal_metadata_(NULL) {
      SharedCtor();
      // @@protoc_insertion_point(constructor:elegram.ContactsResponse)
  }

  void ContactsResponse::InitAsDefaultInstance() {
      _is_default_instance_ = true;
  }

  ContactsResponse::ContactsResponse(const ContactsResponse &from)
      : ::google::protobuf::Message(),
        _internal_metadata_(NULL) {
      SharedCtor();
      MergeFrom(from);
      // @@protoc_insertion_point(copy_constructor:elegram.ContactsResponse)
  }

  void ContactsResponse::SharedCtor() {
      _is_default_instance_ = false;
      _cached_size_ = 0;
  }

  ContactsResponse::~ContactsResponse() {
      // @@protoc_insertion_point(destructor:elegram.ContactsResponse)
      SharedDtor();
  }

  void ContactsResponse::SharedDtor() {
      if (this != default_instance_) {
      }
  }

  void ContactsResponse::SetCachedSize(int size) const {
      GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
      _cached_size_ = size;
      GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor *ContactsResponse::descriptor() {
      protobuf_AssignDescriptorsOnce();
      return ContactsResponse_descriptor_;
  }

  const ContactsResponse &ContactsResponse::default_instance() {
      if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
      return *default_instance_;
  }

  ContactsResponse *ContactsResponse::default_instance_ = NULL;

  ContactsResponse *ContactsResponse::New(::google::protobuf::Arena *arena) const {
      ContactsResponse *n = new ContactsResponse;
      if (arena != NULL) {
          arena->Own(n);
      }
      return n;
  }

  void ContactsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:elegram.ContactsResponse)
      contacts_.Clear();
  }

  bool ContactsResponse::MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
      ::google::protobuf::uint32 tag;
      // @@protoc_insertion_point(parse_start:elegram.ContactsResponse)
      for (;;) {
          ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
          tag = p.first;
          if (!p.second) goto handle_unusual;
          switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
              // repeated .elegram.Contact contacts = 1;
              case 1: {
                  if (tag == 10) {
                      DO_(input->IncrementRecursionDepth());
                        parse_loop_contacts:
                      DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                          input, add_contacts()));
                  } else {
                      goto handle_unusual;
                  }
                  if (input->ExpectTag(10)) goto parse_loop_contacts;
                  input->UnsafeDecrementRecursionDepth();
                  if (input->ExpectAtEnd()) goto success;
                  break;
              }

              default: {
                    handle_unusual:
                  if (tag == 0 ||
                      ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                          ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                      goto success;
                  }
                  DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                  break;
              }
          }
      }
        success:
      // @@protoc_insertion_point(parse_success:elegram.ContactsResponse)
      return true;
        failure:
      // @@protoc_insertion_point(parse_failure:elegram.ContactsResponse)
      return false;
#undef DO_
  }

  void ContactsResponse::SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream *output) const {
      // @@protoc_insertion_point(serialize_start:elegram.ContactsResponse)
      // repeated .elegram.Contact contacts = 1;
      for (unsigned int i = 0, n = this->contacts_size(); i < n; i++) {
          ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
              1, this->contacts(i), output);
      }

      // @@protoc_insertion_point(serialize_end:elegram.ContactsResponse)
  }

  ::google::protobuf::uint8 *ContactsResponse::InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8 *target) const {
      // @@protoc_insertion_point(serialize_to_array_start:elegram.ContactsResponse)
      // repeated .elegram.Contact contacts = 1;
      for (unsigned int i = 0, n = this->contacts_size(); i < n; i++) {
          target = ::google::protobuf::internal::WireFormatLite::
          InternalWriteMessageNoVirtualToArray(
              1, this->contacts(i), false, target);
      }

      // @@protoc_insertion_point(serialize_to_array_end:elegram.ContactsResponse)
      return target;
  }

  int ContactsResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:elegram.ContactsResponse)
      int total_size = 0;

      // repeated .elegram.Contact contacts = 1;
      total_size += 1 * this->contacts_size();
      for (int i = 0; i < this->contacts_size(); i++) {
          total_size +=
              ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                  this->contacts(i));
      }

      GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
      _cached_size_ = total_size;
      GOOGLE_SAFE_CONCURRENT_WRITES_END();
      return total_size;
  }

  void ContactsResponse::MergeFrom(const ::google::protobuf::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:elegram.ContactsResponse)
      if (GOOGLE_PREDICT_FALSE(&from == this)) {
          ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
      }
      const ContactsResponse *source =
          ::google::protobuf::internal::DynamicCastToGenerated<const ContactsResponse>(
              &from);
      if (source == NULL) {
          // @@protoc_insertion_point(generalized_merge_from_cast_fail:elegram.ContactsResponse)
          ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      } else {
          // @@protoc_insertion_point(generalized_merge_from_cast_success:elegram.ContactsResponse)
          MergeFrom(*source);
      }
  }

  void ContactsResponse::MergeFrom(const ContactsResponse &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:elegram.ContactsResponse)
      if (GOOGLE_PREDICT_FALSE(&from == this)) {
          ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
      }
      contacts_.MergeFrom(from.contacts_);
  }

  void ContactsResponse::CopyFrom(const ::google::protobuf::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:elegram.ContactsResponse)
      if (&from == this) return;
      Clear();
      MergeFrom(from);
  }

  void ContactsResponse::CopyFrom(const ContactsResponse &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:elegram.ContactsResponse)
      if (&from == this) return;
      Clear();
      MergeFrom(from);
  }

  bool ContactsResponse::IsInitialized() const {

      return true;
  }

  void ContactsResponse::Swap(ContactsResponse *other) {
      if (other == this) return;
      InternalSwap(other);
  }
  void ContactsResponse::InternalSwap(ContactsResponse *other) {
      contacts_.UnsafeArenaSwap(&other->contacts_);
      _internal_metadata_.Swap(&other->_internal_metadata_);
      std::swap(_cached_size_, other->_cached_size_);
  }

  ::google::protobuf::Metadata ContactsResponse::GetMetadata() const {
      protobuf_AssignDescriptorsOnce();
      ::google::protobuf::Metadata metadata;
      metadata.descriptor = ContactsResponse_descriptor_;
      metadata.reflection = ContactsResponse_reflection_;
      return metadata;
  }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
                                                                                                                          // ContactsResponse

// repeated .elegram.Contact contacts = 1;
int ContactsResponse::contacts_size() const {
  return contacts_.size();
}
void ContactsResponse::clear_contacts() {
  contacts_.Clear();
}
const ::elegram::Contact& ContactsResponse::contacts(int index) const {
  // @@protoc_insertion_point(field_get:elegram.ContactsResponse.contacts)
  return contacts_.Get(index);
}
::elegram::Contact* ContactsResponse::mutable_contacts(int index) {
  // @@protoc_insertion_point(field_mutable:elegram.ContactsResponse.contacts)
  return contacts_.Mutable(index);
}
::elegram::Contact* ContactsResponse::add_contacts() {
  // @@protoc_insertion_point(field_add:elegram.ContactsResponse.contacts)
  return contacts_.Add();
}
::google::protobuf::RepeatedPtrField< ::elegram::Contact >*
ContactsResponse::mutable_contacts() {
  // @@protoc_insertion_point(field_mutable_list:elegram.ContactsResponse.contacts)
  return &contacts_;
}
const ::google::protobuf::RepeatedPtrField< ::elegram::Contact >&
ContactsResponse::contacts() const {
  // @@protoc_insertion_point(field_list:elegram.ContactsResponse.contacts)
  return contacts_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
  const int MessageToRecieve::kSenderIdFieldNumber;
  const int MessageToRecieve::kChatIdFieldNumber;
  const int MessageToRecieve::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

  MessageToRecieve::MessageToRecieve()
      : ::google::protobuf::Message(), _internal_metadata_(NULL) {
      SharedCtor();
      // @@protoc_insertion_point(constructor:elegram.MessageToRecieve)
  }

  void MessageToRecieve::InitAsDefaultInstance() {
      _is_default_instance_ = true;
  }

  MessageToRecieve::MessageToRecieve(const MessageToRecieve &from)
      : ::google::protobuf::Message(),
        _internal_metadata_(NULL) {
      SharedCtor();
      MergeFrom(from);
      // @@protoc_insertion_point(copy_constructor:elegram.MessageToRecieve)
  }

  void MessageToRecieve::SharedCtor() {
      _is_default_instance_ = false;
      ::google::protobuf::internal::GetEmptyString();
      _cached_size_ = 0;
      sender_id_ = GOOGLE_ULONGLONG(0);
      chat_id_ = GOOGLE_ULONGLONG(0);
      text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  MessageToRecieve::~MessageToRecieve() {
      // @@protoc_insertion_point(destructor:elegram.MessageToRecieve)
      SharedDtor();
  }

  void MessageToRecieve::SharedDtor() {
      text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      if (this != default_instance_) {
      }
  }

  void MessageToRecieve::SetCachedSize(int size) const {
      GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
      _cached_size_ = size;
      GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor *MessageToRecieve::descriptor() {
      protobuf_AssignDescriptorsOnce();
      return MessageToRecieve_descriptor_;
  }

  const MessageToRecieve &MessageToRecieve::default_instance() {
      if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
      return *default_instance_;
  }

  MessageToRecieve *MessageToRecieve::default_instance_ = NULL;

  MessageToRecieve *MessageToRecieve::New(::google::protobuf::Arena *arena) const {
      MessageToRecieve *n = new MessageToRecieve;
      if (arena != NULL) {
          arena->Own(n);
      }
      return n;
  }

  void MessageToRecieve::Clear() {
// @@protoc_insertion_point(message_clear_start:elegram.MessageToRecieve)
#if defined(__clang__)
                                                                                                                              #define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MessageToRecieve, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MessageToRecieve*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

      ZR_(sender_id_, chat_id_);
      text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  }

  bool MessageToRecieve::MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
      ::google::protobuf::uint32 tag;
      // @@protoc_insertion_point(parse_start:elegram.MessageToRecieve)
      for (;;) {
          ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
          tag = p.first;
          if (!p.second) goto handle_unusual;
          switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
              // optional uint64 sender_id = 1;
              case 1: {
                  if (tag == 8) {
                      DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                          ::google::protobuf::uint64,
                          ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                          input, &sender_id_)));

                  } else {
                      goto handle_unusual;
                  }
                  if (input->ExpectTag(16)) goto parse_chat_id;
                  break;
              }

                  // optional uint64 chat_id = 2;
              case 2: {
                  if (tag == 16) {
                        parse_chat_id:
                      DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                          ::google::protobuf::uint64,
                          ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                          input, &chat_id_)));

                  } else {
                      goto handle_unusual;
                  }
                  if (input->ExpectTag(26)) goto parse_text;
                  break;
              }

                  // optional string text = 3;
              case 3: {
                  if (tag == 26) {
                        parse_text:
                      DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                          input, this->mutable_text()));
                      DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                          this->text().data(), this->text().length(),
                          ::google::protobuf::internal::WireFormatLite::PARSE,
                          "elegram.MessageToRecieve.text"));
                  } else {
                      goto handle_unusual;
                  }
                  if (input->ExpectAtEnd()) goto success;
                  break;
              }

              default: {
                    handle_unusual:
                  if (tag == 0 ||
                      ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                          ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                      goto success;
                  }
                  DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                  break;
              }
          }
      }
        success:
      // @@protoc_insertion_point(parse_success:elegram.MessageToRecieve)
      return true;
        failure:
      // @@protoc_insertion_point(parse_failure:elegram.MessageToRecieve)
      return false;
#undef DO_
  }

  void MessageToRecieve::SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream *output) const {
      // @@protoc_insertion_point(serialize_start:elegram.MessageToRecieve)
      // optional uint64 sender_id = 1;
      if (this->sender_id() != 0) {
          ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sender_id(), output);
      }

      // optional uint64 chat_id = 2;
      if (this->chat_id() != 0) {
          ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->chat_id(), output);
      }

      // optional string text = 3;
      if (this->text().size() > 0) {
          ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->text().data(), this->text().length(),
              ::google::protobuf::internal::WireFormatLite::SERIALIZE,
              "elegram.MessageToRecieve.text");
          ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
              3, this->text(), output);
      }

      // @@protoc_insertion_point(serialize_end:elegram.MessageToRecieve)
  }

  ::google::protobuf::uint8 *MessageToRecieve::InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8 *target) const {
      // @@protoc_insertion_point(serialize_to_array_start:elegram.MessageToRecieve)
      // optional uint64 sender_id = 1;
      if (this->sender_id() != 0) {
          target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1,
                                                                                    this->sender_id(),
                                                                                    target);
      }

      // optional uint64 chat_id = 2;
      if (this->chat_id() != 0) {
          target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2,
                                                                                    this->chat_id(),
                                                                                    target);
      }

      // optional string text = 3;
      if (this->text().size() > 0) {
          ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->text().data(), this->text().length(),
              ::google::protobuf::internal::WireFormatLite::SERIALIZE,
              "elegram.MessageToRecieve.text");
          target =
              ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                  3, this->text(), target);
      }

      // @@protoc_insertion_point(serialize_to_array_end:elegram.MessageToRecieve)
      return target;
  }

  int MessageToRecieve::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:elegram.MessageToRecieve)
      int total_size = 0;

      // optional uint64 sender_id = 1;
      if (this->sender_id() != 0) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::UInt64Size(
                  this->sender_id());
      }

      // optional uint64 chat_id = 2;
      if (this->chat_id() != 0) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::UInt64Size(
                  this->chat_id());
      }

      // optional string text = 3;
      if (this->text().size() > 0) {
          total_size += 1 +
              ::google::protobuf::internal::WireFormatLite::StringSize(
                  this->text());
      }

      GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
      _cached_size_ = total_size;
      GOOGLE_SAFE_CONCURRENT_WRITES_END();
      return total_size;
  }

  void MessageToRecieve::MergeFrom(const ::google::protobuf::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:elegram.MessageToRecieve)
      if (GOOGLE_PREDICT_FALSE(&from == this)) {
          ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
      }
      const MessageToRecieve *source =
          ::google::protobuf::internal::DynamicCastToGenerated<const MessageToRecieve>(
              &from);
      if (source == NULL) {
          // @@protoc_insertion_point(generalized_merge_from_cast_fail:elegram.MessageToRecieve)
          ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      } else {
          // @@protoc_insertion_point(generalized_merge_from_cast_success:elegram.MessageToRecieve)
          MergeFrom(*source);
      }
  }

  void MessageToRecieve::MergeFrom(const MessageToRecieve &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:elegram.MessageToRecieve)
      if (GOOGLE_PREDICT_FALSE(&from == this)) {
          ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
      }
      if (from.sender_id() != 0) {
          set_sender_id(from.sender_id());
      }
      if (from.chat_id() != 0) {
          set_chat_id(from.chat_id());
      }
      if (from.text().size() > 0) {

          text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                                  from.text_);
      }
  }

  void MessageToRecieve::CopyFrom(const ::google::protobuf::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:elegram.MessageToRecieve)
      if (&from == this) return;
      Clear();
      MergeFrom(from);
  }

  void MessageToRecieve::CopyFrom(const MessageToRecieve &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:elegram.MessageToRecieve)
      if (&from == this) return;
      Clear();
      MergeFrom(from);
  }

  bool MessageToRecieve::IsInitialized() const {

      return true;
  }

  void MessageToRecieve::Swap(MessageToRecieve *other) {
      if (other == this) return;
      InternalSwap(other);
  }
  void MessageToRecieve::InternalSwap(MessageToRecieve *other) {
      std::swap(sender_id_, other->sender_id_);
      std::swap(chat_id_, other->chat_id_);
      text_.Swap(&other->text_);
      _internal_metadata_.Swap(&other->_internal_metadata_);
      std::swap(_cached_size_, other->_cached_size_);
  }

  ::google::protobuf::Metadata MessageToRecieve::GetMetadata() const {
      protobuf_AssignDescriptorsOnce();
      ::google::protobuf::Metadata metadata;
      metadata.descriptor = MessageToRecieve_descriptor_;
      metadata.reflection = MessageToRecieve_reflection_;
      return metadata;
  }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
                                                                                                                          // MessageToRecieve

// optional uint64 sender_id = 1;
void MessageToRecieve::clear_sender_id() {
  sender_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 MessageToRecieve::sender_id() const {
  // @@protoc_insertion_point(field_get:elegram.MessageToRecieve.sender_id)
  return sender_id_;
}
 void MessageToRecieve::set_sender_id(::google::protobuf::uint64 value) {

  sender_id_ = value;
  // @@protoc_insertion_point(field_set:elegram.MessageToRecieve.sender_id)
}

// optional uint64 chat_id = 2;
void MessageToRecieve::clear_chat_id() {
  chat_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 MessageToRecieve::chat_id() const {
  // @@protoc_insertion_point(field_get:elegram.MessageToRecieve.chat_id)
  return chat_id_;
}
 void MessageToRecieve::set_chat_id(::google::protobuf::uint64 value) {

  chat_id_ = value;
  // @@protoc_insertion_point(field_set:elegram.MessageToRecieve.chat_id)
}

// optional string text = 3;
void MessageToRecieve::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MessageToRecieve::text() const {
  // @@protoc_insertion_point(field_get:elegram.MessageToRecieve.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageToRecieve::set_text(const ::std::string& value) {

  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:elegram.MessageToRecieve.text)
}
 void MessageToRecieve::set_text(const char* value) {

  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:elegram.MessageToRecieve.text)
}
 void MessageToRecieve::set_text(const char* value, size_t size) {

  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:elegram.MessageToRecieve.text)
}
 ::std::string* MessageToRecieve::mutable_text() {

  // @@protoc_insertion_point(field_mutable:elegram.MessageToRecieve.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MessageToRecieve::release_text() {
  // @@protoc_insertion_point(field_release:elegram.MessageToRecieve.text)

  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageToRecieve::set_allocated_text(::std::string* text) {
  if (text != NULL) {

  } else {

  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:elegram.MessageToRecieve.text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
  const int MessagesResponse::kMessagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

  MessagesResponse::MessagesResponse()
      : ::google::protobuf::Message(), _internal_metadata_(NULL) {
      SharedCtor();
      // @@protoc_insertion_point(constructor:elegram.MessagesResponse)
  }

  void MessagesResponse::InitAsDefaultInstance() {
      _is_default_instance_ = true;
  }

  MessagesResponse::MessagesResponse(const MessagesResponse &from)
      : ::google::protobuf::Message(),
        _internal_metadata_(NULL) {
      SharedCtor();
      MergeFrom(from);
      // @@protoc_insertion_point(copy_constructor:elegram.MessagesResponse)
  }

  void MessagesResponse::SharedCtor() {
      _is_default_instance_ = false;
      _cached_size_ = 0;
  }

  MessagesResponse::~MessagesResponse() {
      // @@protoc_insertion_point(destructor:elegram.MessagesResponse)
      SharedDtor();
  }

  void MessagesResponse::SharedDtor() {
      if (this != default_instance_) {
      }
  }

  void MessagesResponse::SetCachedSize(int size) const {
      GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
      _cached_size_ = size;
      GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor *MessagesResponse::descriptor() {
      protobuf_AssignDescriptorsOnce();
      return MessagesResponse_descriptor_;
  }

  const MessagesResponse &MessagesResponse::default_instance() {
      if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
      return *default_instance_;
  }

  MessagesResponse *MessagesResponse::default_instance_ = NULL;

  MessagesResponse *MessagesResponse::New(::google::protobuf::Arena *arena) const {
      MessagesResponse *n = new MessagesResponse;
      if (arena != NULL) {
          arena->Own(n);
      }
      return n;
  }

  void MessagesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:elegram.MessagesResponse)
      messages_.Clear();
  }

  bool MessagesResponse::MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
      ::google::protobuf::uint32 tag;
      // @@protoc_insertion_point(parse_start:elegram.MessagesResponse)
      for (;;) {
          ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
          tag = p.first;
          if (!p.second) goto handle_unusual;
          switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
              // repeated .elegram.MessageToRecieve messages = 1;
              case 1: {
                  if (tag == 10) {
                      DO_(input->IncrementRecursionDepth());
                        parse_loop_messages:
                      DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                          input, add_messages()));
                  } else {
                      goto handle_unusual;
                  }
                  if (input->ExpectTag(10)) goto parse_loop_messages;
                  input->UnsafeDecrementRecursionDepth();
                  if (input->ExpectAtEnd()) goto success;
                  break;
              }

              default: {
                    handle_unusual:
                  if (tag == 0 ||
                      ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                          ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                      goto success;
                  }
                  DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                  break;
              }
          }
      }
        success:
      // @@protoc_insertion_point(parse_success:elegram.MessagesResponse)
      return true;
        failure:
      // @@protoc_insertion_point(parse_failure:elegram.MessagesResponse)
      return false;
#undef DO_
  }

  void MessagesResponse::SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream *output) const {
      // @@protoc_insertion_point(serialize_start:elegram.MessagesResponse)
      // repeated .elegram.MessageToRecieve messages = 1;
      for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
          ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
              1, this->messages(i), output);
      }

      // @@protoc_insertion_point(serialize_end:elegram.MessagesResponse)
  }

  ::google::protobuf::uint8 *MessagesResponse::InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8 *target) const {
      // @@protoc_insertion_point(serialize_to_array_start:elegram.MessagesResponse)
      // repeated .elegram.MessageToRecieve messages = 1;
      for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
          target = ::google::protobuf::internal::WireFormatLite::
          InternalWriteMessageNoVirtualToArray(
              1, this->messages(i), false, target);
      }

      // @@protoc_insertion_point(serialize_to_array_end:elegram.MessagesResponse)
      return target;
  }

  int MessagesResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:elegram.MessagesResponse)
      int total_size = 0;

      // repeated .elegram.MessageToRecieve messages = 1;
      total_size += 1 * this->messages_size();
      for (int i = 0; i < this->messages_size(); i++) {
          total_size +=
              ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                  this->messages(i));
      }

      GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
      _cached_size_ = total_size;
      GOOGLE_SAFE_CONCURRENT_WRITES_END();
      return total_size;
  }

  void MessagesResponse::MergeFrom(const ::google::protobuf::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:elegram.MessagesResponse)
      if (GOOGLE_PREDICT_FALSE(&from == this)) {
          ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
      }
      const MessagesResponse *source =
          ::google::protobuf::internal::DynamicCastToGenerated<const MessagesResponse>(
              &from);
      if (source == NULL) {
          // @@protoc_insertion_point(generalized_merge_from_cast_fail:elegram.MessagesResponse)
          ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      } else {
          // @@protoc_insertion_point(generalized_merge_from_cast_success:elegram.MessagesResponse)
          MergeFrom(*source);
      }
  }

  void MessagesResponse::MergeFrom(const MessagesResponse &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:elegram.MessagesResponse)
      if (GOOGLE_PREDICT_FALSE(&from == this)) {
          ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
      }
      messages_.MergeFrom(from.messages_);
  }

  void MessagesResponse::CopyFrom(const ::google::protobuf::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:elegram.MessagesResponse)
      if (&from == this) return;
      Clear();
      MergeFrom(from);
  }

  void MessagesResponse::CopyFrom(const MessagesResponse &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:elegram.MessagesResponse)
      if (&from == this) return;
      Clear();
      MergeFrom(from);
  }

  bool MessagesResponse::IsInitialized() const {

      return true;
  }

  void MessagesResponse::Swap(MessagesResponse *other) {
      if (other == this) return;
      InternalSwap(other);
  }
  void MessagesResponse::InternalSwap(MessagesResponse *other) {
      messages_.UnsafeArenaSwap(&other->messages_);
      _internal_metadata_.Swap(&other->_internal_metadata_);
      std::swap(_cached_size_, other->_cached_size_);
  }

  ::google::protobuf::Metadata MessagesResponse::GetMetadata() const {
      protobuf_AssignDescriptorsOnce();
      ::google::protobuf::Metadata metadata;
      metadata.descriptor = MessagesResponse_descriptor_;
      metadata.reflection = MessagesResponse_reflection_;
      return metadata;
  }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
                                                                                                                          // MessagesResponse

// repeated .elegram.MessageToRecieve messages = 1;
int MessagesResponse::messages_size() const {
  return messages_.size();
}
void MessagesResponse::clear_messages() {
  messages_.Clear();
}
const ::elegram::MessageToRecieve& MessagesResponse::messages(int index) const {
  // @@protoc_insertion_point(field_get:elegram.MessagesResponse.messages)
  return messages_.Get(index);
}
::elegram::MessageToRecieve* MessagesResponse::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:elegram.MessagesResponse.messages)
  return messages_.Mutable(index);
}
::elegram::MessageToRecieve* MessagesResponse::add_messages() {
  // @@protoc_insertion_point(field_add:elegram.MessagesResponse.messages)
  return messages_.Add();
}
::google::protobuf::RepeatedPtrField< ::elegram::MessageToRecieve >*
MessagesResponse::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:elegram.MessagesResponse.messages)
  return &messages_;
}
const ::google::protobuf::RepeatedPtrField< ::elegram::MessageToRecieve >&
MessagesResponse::messages() const {
  // @@protoc_insertion_point(field_list:elegram.MessagesResponse.messages)
  return messages_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
  const int Response::kStatusResponseFieldNumber;
  const int Response::kChatsResponseFieldNumber;
  const int Response::kContactsResponseFieldNumber;
  const int Response::kMessagesResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

  Response::Response()
      : ::google::protobuf::Message(), _internal_metadata_(NULL) {
      SharedCtor();
      // @@protoc_insertion_point(constructor:elegram.Response)
  }

  void Response::InitAsDefaultInstance() {
      _is_default_instance_ = true;
      Response_default_oneof_instance_->status_response_ =
          const_cast< ::elegram::StatusResponse *>(&::elegram::StatusResponse::default_instance());
      Response_default_oneof_instance_->chats_response_ =
          const_cast< ::elegram::ChatsResponse *>(&::elegram::ChatsResponse::default_instance());
      Response_default_oneof_instance_->contacts_response_ =
          const_cast< ::elegram::ContactsResponse *>(&::elegram::ContactsResponse::default_instance());
      Response_default_oneof_instance_->messages_response_ =
          const_cast< ::elegram::MessagesResponse *>(&::elegram::MessagesResponse::default_instance());
  }

  Response::Response(const Response &from)
      : ::google::protobuf::Message(),
        _internal_metadata_(NULL) {
      SharedCtor();
      MergeFrom(from);
      // @@protoc_insertion_point(copy_constructor:elegram.Response)
  }

  void Response::SharedCtor() {
      _is_default_instance_ = false;
      _cached_size_ = 0;
      clear_has_msg();
  }

  Response::~Response() {
      // @@protoc_insertion_point(destructor:elegram.Response)
      SharedDtor();
  }

  void Response::SharedDtor() {
      if (has_msg()) {
          clear_msg();
      }
      if (this != default_instance_) {
      }
  }

  void Response::SetCachedSize(int size) const {
      GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
      _cached_size_ = size;
      GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor *Response::descriptor() {
      protobuf_AssignDescriptorsOnce();
      return Response_descriptor_;
  }

  const Response &Response::default_instance() {
      if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
      return *default_instance_;
  }

  Response *Response::default_instance_ = NULL;

  Response *Response::New(::google::protobuf::Arena *arena) const {
      Response *n = new Response;
      if (arena != NULL) {
          arena->Own(n);
      }
      return n;
  }

  void Response::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:elegram.Response)
      switch (msg_case()) {
          case kStatusResponse: {
              delete msg_.status_response_;
              break;
          }
          case kChatsResponse: {
              delete msg_.chats_response_;
              break;
          }
          case kContactsResponse: {
              delete msg_.contacts_response_;
              break;
          }
          case kMessagesResponse: {
              delete msg_.messages_response_;
              break;
          }
          case MSG_NOT_SET: {
              break;
          }
      }
      _oneof_case_[0] = MSG_NOT_SET;
  }

  void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:elegram.Response)
      clear_msg();
  }

  bool Response::MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
      ::google::protobuf::uint32 tag;
      // @@protoc_insertion_point(parse_start:elegram.Response)
      for (;;) {
          ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
          tag = p.first;
          if (!p.second) goto handle_unusual;
          switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
              // optional .elegram.StatusResponse status_response = 1;
              case 1: {
                  if (tag == 10) {
                      DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                          input, mutable_status_response()));
                  } else {
                      goto handle_unusual;
                  }
                  if (input->ExpectTag(18)) goto parse_chats_response;
                  break;
              }

                  // optional .elegram.ChatsResponse chats_response = 2;
              case 2: {
                  if (tag == 18) {
                        parse_chats_response:
                      DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                          input, mutable_chats_response()));
                  } else {
                      goto handle_unusual;
                  }
                  if (input->ExpectTag(26)) goto parse_contacts_response;
                  break;
              }

                  // optional .elegram.ContactsResponse contacts_response = 3;
              case 3: {
                  if (tag == 26) {
                        parse_contacts_response:
                      DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                          input, mutable_contacts_response()));
                  } else {
                      goto handle_unusual;
                  }
                  if (input->ExpectTag(34)) goto parse_messages_response;
                  break;
              }

                  // optional .elegram.MessagesResponse messages_response = 4;
              case 4: {
                  if (tag == 34) {
                        parse_messages_response:
                      DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                          input, mutable_messages_response()));
                  } else {
                      goto handle_unusual;
                  }
                  if (input->ExpectAtEnd()) goto success;
                  break;
              }

              default: {
                    handle_unusual:
                  if (tag == 0 ||
                      ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                          ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                      goto success;
                  }
                  DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                  break;
              }
          }
      }
        success:
      // @@protoc_insertion_point(parse_success:elegram.Response)
      return true;
        failure:
      // @@protoc_insertion_point(parse_failure:elegram.Response)
      return false;
#undef DO_
  }

  void Response::SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream *output) const {
      // @@protoc_insertion_point(serialize_start:elegram.Response)
      // optional .elegram.StatusResponse status_response = 1;
      if (has_status_response()) {
          ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
              1, *msg_.status_response_, output);
      }

      // optional .elegram.ChatsResponse chats_response = 2;
      if (has_chats_response()) {
          ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
              2, *msg_.chats_response_, output);
      }

      // optional .elegram.ContactsResponse contacts_response = 3;
      if (has_contacts_response()) {
          ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
              3, *msg_.contacts_response_, output);
      }

      // optional .elegram.MessagesResponse messages_response = 4;
      if (has_messages_response()) {
          ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
              4, *msg_.messages_response_, output);
      }

      // @@protoc_insertion_point(serialize_end:elegram.Response)
  }

  ::google::protobuf::uint8 *Response::InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8 *target) const {
      // @@protoc_insertion_point(serialize_to_array_start:elegram.Response)
      // optional .elegram.StatusResponse status_response = 1;
      if (has_status_response()) {
          target = ::google::protobuf::internal::WireFormatLite::
          InternalWriteMessageNoVirtualToArray(
              1, *msg_.status_response_, false, target);
      }

      // optional .elegram.ChatsResponse chats_response = 2;
      if (has_chats_response()) {
          target = ::google::protobuf::internal::WireFormatLite::
          InternalWriteMessageNoVirtualToArray(
              2, *msg_.chats_response_, false, target);
      }

      // optional .elegram.ContactsResponse contacts_response = 3;
      if (has_contacts_response()) {
          target = ::google::protobuf::internal::WireFormatLite::
          InternalWriteMessageNoVirtualToArray(
              3, *msg_.contacts_response_, false, target);
      }

      // optional .elegram.MessagesResponse messages_response = 4;
      if (has_messages_response()) {
          target = ::google::protobuf::internal::WireFormatLite::
          InternalWriteMessageNoVirtualToArray(
              4, *msg_.messages_response_, false, target);
      }

      // @@protoc_insertion_point(serialize_to_array_end:elegram.Response)
      return target;
  }

  int Response::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:elegram.Response)
      int total_size = 0;

      switch (msg_case()) {
          // optional .elegram.StatusResponse status_response = 1;
          case kStatusResponse: {
              total_size += 1 +
                  ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                      *msg_.status_response_);
              break;
          }
              // optional .elegram.ChatsResponse chats_response = 2;
          case kChatsResponse: {
              total_size += 1 +
                  ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                      *msg_.chats_response_);
              break;
          }
              // optional .elegram.ContactsResponse contacts_response = 3;
          case kContactsResponse: {
              total_size += 1 +
                  ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                      *msg_.contacts_response_);
              break;
          }
              // optional .elegram.MessagesResponse messages_response = 4;
          case kMessagesResponse: {
              total_size += 1 +
                  ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                      *msg_.messages_response_);
              break;
          }
          case MSG_NOT_SET: {
              break;
          }
      }
      GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
      _cached_size_ = total_size;
      GOOGLE_SAFE_CONCURRENT_WRITES_END();
      return total_size;
  }

  void Response::MergeFrom(const ::google::protobuf::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:elegram.Response)
      if (GOOGLE_PREDICT_FALSE(&from == this)) {
          ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
      }
      const Response *source =
          ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
              &from);
      if (source == NULL) {
          // @@protoc_insertion_point(generalized_merge_from_cast_fail:elegram.Response)
          ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      } else {
          // @@protoc_insertion_point(generalized_merge_from_cast_success:elegram.Response)
          MergeFrom(*source);
      }
  }

  void Response::MergeFrom(const Response &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:elegram.Response)
      if (GOOGLE_PREDICT_FALSE(&from == this)) {
          ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
      }
      switch (from.msg_case()) {
          case kStatusResponse: {
              mutable_status_response()->::elegram::StatusResponse::MergeFrom(from.status_response());
              break;
          }
          case kChatsResponse: {
              mutable_chats_response()->::elegram::ChatsResponse::MergeFrom(from.chats_response());
              break;
          }
          case kContactsResponse: {
              mutable_contacts_response()
                  ->::elegram::ContactsResponse::MergeFrom(from.contacts_response());
              break;
          }
          case kMessagesResponse: {
              mutable_messages_response()
                  ->::elegram::MessagesResponse::MergeFrom(from.messages_response());
              break;
          }
          case MSG_NOT_SET: {
              break;
          }
      }
  }

  void Response::CopyFrom(const ::google::protobuf::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:elegram.Response)
      if (&from == this) return;
      Clear();
      MergeFrom(from);
  }

  void Response::CopyFrom(const Response &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:elegram.Response)
      if (&from == this) return;
      Clear();
      MergeFrom(from);
  }

  bool Response::IsInitialized() const {

      return true;
  }

  void Response::Swap(Response *other) {
      if (other == this) return;
      InternalSwap(other);
  }
  void Response::InternalSwap(Response *other) {
      std::swap(msg_, other->msg_);
      std::swap(_oneof_case_[0], other->_oneof_case_[0]);
      _internal_metadata_.Swap(&other->_internal_metadata_);
      std::swap(_cached_size_, other->_cached_size_);
  }

  ::google::protobuf::Metadata Response::GetMetadata() const {
      protobuf_AssignDescriptorsOnce();
      ::google::protobuf::Metadata metadata;
      metadata.descriptor = Response_descriptor_;
      metadata.reflection = Response_reflection_;
      return metadata;
  }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
                                                                                                                          // Response

// optional .elegram.StatusResponse status_response = 1;
bool Response::has_status_response() const {
  return msg_case() == kStatusResponse;
}
void Response::set_has_status_response() {
  _oneof_case_[0] = kStatusResponse;
}
void Response::clear_status_response() {
  if (has_status_response()) {
    delete msg_.status_response_;
    clear_has_msg();
  }
}
 const ::elegram::StatusResponse& Response::status_response() const {
  // @@protoc_insertion_point(field_get:elegram.Response.status_response)
  return has_status_response()
      ? *msg_.status_response_
      : ::elegram::StatusResponse::default_instance();
}
::elegram::StatusResponse* Response::mutable_status_response() {
  if (!has_status_response()) {
    clear_msg();
    set_has_status_response();
    msg_.status_response_ = new ::elegram::StatusResponse;
  }
  // @@protoc_insertion_point(field_mutable:elegram.Response.status_response)
  return msg_.status_response_;
}
::elegram::StatusResponse* Response::release_status_response() {
  // @@protoc_insertion_point(field_release:elegram.Response.status_response)
  if (has_status_response()) {
    clear_has_msg();
    ::elegram::StatusResponse* temp = msg_.status_response_;
    msg_.status_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_status_response(::elegram::StatusResponse* status_response) {
  clear_msg();
  if (status_response) {
    set_has_status_response();
    msg_.status_response_ = status_response;
  }
  // @@protoc_insertion_point(field_set_allocated:elegram.Response.status_response)
}

// optional .elegram.ChatsResponse chats_response = 2;
bool Response::has_chats_response() const {
  return msg_case() == kChatsResponse;
}
void Response::set_has_chats_response() {
  _oneof_case_[0] = kChatsResponse;
}
void Response::clear_chats_response() {
  if (has_chats_response()) {
    delete msg_.chats_response_;
    clear_has_msg();
  }
}
 const ::elegram::ChatsResponse& Response::chats_response() const {
  // @@protoc_insertion_point(field_get:elegram.Response.chats_response)
  return has_chats_response()
      ? *msg_.chats_response_
      : ::elegram::ChatsResponse::default_instance();
}
::elegram::ChatsResponse* Response::mutable_chats_response() {
  if (!has_chats_response()) {
    clear_msg();
    set_has_chats_response();
    msg_.chats_response_ = new ::elegram::ChatsResponse;
  }
  // @@protoc_insertion_point(field_mutable:elegram.Response.chats_response)
  return msg_.chats_response_;
}
::elegram::ChatsResponse* Response::release_chats_response() {
  // @@protoc_insertion_point(field_release:elegram.Response.chats_response)
  if (has_chats_response()) {
    clear_has_msg();
    ::elegram::ChatsResponse* temp = msg_.chats_response_;
    msg_.chats_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_chats_response(::elegram::ChatsResponse* chats_response) {
  clear_msg();
  if (chats_response) {
    set_has_chats_response();
    msg_.chats_response_ = chats_response;
  }
  // @@protoc_insertion_point(field_set_allocated:elegram.Response.chats_response)
}

// optional .elegram.ContactsResponse contacts_response = 3;
bool Response::has_contacts_response() const {
  return msg_case() == kContactsResponse;
}
void Response::set_has_contacts_response() {
  _oneof_case_[0] = kContactsResponse;
}
void Response::clear_contacts_response() {
  if (has_contacts_response()) {
    delete msg_.contacts_response_;
    clear_has_msg();
  }
}
 const ::elegram::ContactsResponse& Response::contacts_response() const {
  // @@protoc_insertion_point(field_get:elegram.Response.contacts_response)
  return has_contacts_response()
      ? *msg_.contacts_response_
      : ::elegram::ContactsResponse::default_instance();
}
::elegram::ContactsResponse* Response::mutable_contacts_response() {
  if (!has_contacts_response()) {
    clear_msg();
    set_has_contacts_response();
    msg_.contacts_response_ = new ::elegram::ContactsResponse;
  }
  // @@protoc_insertion_point(field_mutable:elegram.Response.contacts_response)
  return msg_.contacts_response_;
}
::elegram::ContactsResponse* Response::release_contacts_response() {
  // @@protoc_insertion_point(field_release:elegram.Response.contacts_response)
  if (has_contacts_response()) {
    clear_has_msg();
    ::elegram::ContactsResponse* temp = msg_.contacts_response_;
    msg_.contacts_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_contacts_response(::elegram::ContactsResponse* contacts_response) {
  clear_msg();
  if (contacts_response) {
    set_has_contacts_response();
    msg_.contacts_response_ = contacts_response;
  }
  // @@protoc_insertion_point(field_set_allocated:elegram.Response.contacts_response)
}

// optional .elegram.MessagesResponse messages_response = 4;
bool Response::has_messages_response() const {
  return msg_case() == kMessagesResponse;
}
void Response::set_has_messages_response() {
  _oneof_case_[0] = kMessagesResponse;
}
void Response::clear_messages_response() {
  if (has_messages_response()) {
    delete msg_.messages_response_;
    clear_has_msg();
  }
}
 const ::elegram::MessagesResponse& Response::messages_response() const {
  // @@protoc_insertion_point(field_get:elegram.Response.messages_response)
  return has_messages_response()
      ? *msg_.messages_response_
      : ::elegram::MessagesResponse::default_instance();
}
::elegram::MessagesResponse* Response::mutable_messages_response() {
  if (!has_messages_response()) {
    clear_msg();
    set_has_messages_response();
    msg_.messages_response_ = new ::elegram::MessagesResponse;
  }
  // @@protoc_insertion_point(field_mutable:elegram.Response.messages_response)
  return msg_.messages_response_;
}
::elegram::MessagesResponse* Response::release_messages_response() {
  // @@protoc_insertion_point(field_release:elegram.Response.messages_response)
  if (has_messages_response()) {
    clear_has_msg();
    ::elegram::MessagesResponse* temp = msg_.messages_response_;
    msg_.messages_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_messages_response(::elegram::MessagesResponse* messages_response) {
  clear_msg();
  if (messages_response) {
    set_has_messages_response();
    msg_.messages_response_ = messages_response;
  }
  // @@protoc_insertion_point(field_set_allocated:elegram.Response.messages_response)
}

bool Response::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
void Response::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
Response::MsgCase Response::msg_case() const {
  return Response::MsgCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
  const int WrappedMessage::kResponseFieldNumber;
  const int WrappedMessage::kRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

  WrappedMessage::WrappedMessage()
      : ::google::protobuf::Message(), _internal_metadata_(NULL) {
      SharedCtor();
      // @@protoc_insertion_point(constructor:elegram.WrappedMessage)
  }

  void WrappedMessage::InitAsDefaultInstance() {
      _is_default_instance_ = true;
      WrappedMessage_default_oneof_instance_->response_ =
          const_cast< ::elegram::Response *>(&::elegram::Response::default_instance());
      WrappedMessage_default_oneof_instance_->request_ =
          const_cast< ::elegram::Request *>(&::elegram::Request::default_instance());
  }

  WrappedMessage::WrappedMessage(const WrappedMessage &from)
      : ::google::protobuf::Message(),
        _internal_metadata_(NULL) {
      SharedCtor();
      MergeFrom(from);
      // @@protoc_insertion_point(copy_constructor:elegram.WrappedMessage)
  }

  void WrappedMessage::SharedCtor() {
      _is_default_instance_ = false;
      _cached_size_ = 0;
      clear_has_msg();
  }

  WrappedMessage::~WrappedMessage() {
      // @@protoc_insertion_point(destructor:elegram.WrappedMessage)
      SharedDtor();
  }

  void WrappedMessage::SharedDtor() {
      if (has_msg()) {
          clear_msg();
      }
      if (this != default_instance_) {
      }
  }

  void WrappedMessage::SetCachedSize(int size) const {
      GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
      _cached_size_ = size;
      GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor *WrappedMessage::descriptor() {
      protobuf_AssignDescriptorsOnce();
      return WrappedMessage_descriptor_;
  }

  const WrappedMessage &WrappedMessage::default_instance() {
      if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
      return *default_instance_;
  }

  WrappedMessage *WrappedMessage::default_instance_ = NULL;

  WrappedMessage *WrappedMessage::New(::google::protobuf::Arena *arena) const {
      WrappedMessage *n = new WrappedMessage;
      if (arena != NULL) {
          arena->Own(n);
      }
      return n;
  }

  void WrappedMessage::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:elegram.WrappedMessage)
      switch (msg_case()) {
          case kResponse: {
              delete msg_.response_;
              break;
          }
          case kRequest: {
              delete msg_.request_;
              break;
          }
          case MSG_NOT_SET: {
              break;
          }
      }
      _oneof_case_[0] = MSG_NOT_SET;
  }

  void WrappedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:elegram.WrappedMessage)
      clear_msg();
  }

  bool WrappedMessage::MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
      ::google::protobuf::uint32 tag;
      // @@protoc_insertion_point(parse_start:elegram.WrappedMessage)
      for (;;) {
          ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
          tag = p.first;
          if (!p.second) goto handle_unusual;
          switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
              // optional .elegram.Response response = 1;
              case 1: {
                  if (tag == 10) {
                      DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                          input, mutable_response()));
                  } else {
                      goto handle_unusual;
                  }
                  if (input->ExpectTag(18)) goto parse_request;
                  break;
              }

                  // optional .elegram.Request request = 2;
              case 2: {
                  if (tag == 18) {
                        parse_request:
                      DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                          input, mutable_request()));
                  } else {
                      goto handle_unusual;
                  }
                  if (input->ExpectAtEnd()) goto success;
                  break;
              }

              default: {
                    handle_unusual:
                  if (tag == 0 ||
                      ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                          ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                      goto success;
                  }
                  DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                  break;
              }
          }
      }
        success:
      // @@protoc_insertion_point(parse_success:elegram.WrappedMessage)
      return true;
        failure:
      // @@protoc_insertion_point(parse_failure:elegram.WrappedMessage)
      return false;
#undef DO_
  }

  void WrappedMessage::SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream *output) const {
      // @@protoc_insertion_point(serialize_start:elegram.WrappedMessage)
      // optional .elegram.Response response = 1;
      if (has_response()) {
          ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
              1, *msg_.response_, output);
      }

      // optional .elegram.Request request = 2;
      if (has_request()) {
          ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
              2, *msg_.request_, output);
      }

      // @@protoc_insertion_point(serialize_end:elegram.WrappedMessage)
  }

  ::google::protobuf::uint8 *WrappedMessage::InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8 *target) const {
      // @@protoc_insertion_point(serialize_to_array_start:elegram.WrappedMessage)
      // optional .elegram.Response response = 1;
      if (has_response()) {
          target = ::google::protobuf::internal::WireFormatLite::
          InternalWriteMessageNoVirtualToArray(
              1, *msg_.response_, false, target);
      }

      // optional .elegram.Request request = 2;
      if (has_request()) {
          target = ::google::protobuf::internal::WireFormatLite::
          InternalWriteMessageNoVirtualToArray(
              2, *msg_.request_, false, target);
      }

      // @@protoc_insertion_point(serialize_to_array_end:elegram.WrappedMessage)
      return target;
  }

  int WrappedMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:elegram.WrappedMessage)
      int total_size = 0;

      switch (msg_case()) {
          // optional .elegram.Response response = 1;
          case kResponse: {
              total_size += 1 +
                  ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                      *msg_.response_);
              break;
          }
              // optional .elegram.Request request = 2;
          case kRequest: {
              total_size += 1 +
                  ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                      *msg_.request_);
              break;
          }
          case MSG_NOT_SET: {
              break;
          }
      }
      GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
      _cached_size_ = total_size;
      GOOGLE_SAFE_CONCURRENT_WRITES_END();
      return total_size;
  }

  void WrappedMessage::MergeFrom(const ::google::protobuf::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:elegram.WrappedMessage)
      if (GOOGLE_PREDICT_FALSE(&from == this)) {
          ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
      }
      const WrappedMessage *source =
          ::google::protobuf::internal::DynamicCastToGenerated<const WrappedMessage>(
              &from);
      if (source == NULL) {
          // @@protoc_insertion_point(generalized_merge_from_cast_fail:elegram.WrappedMessage)
          ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      } else {
          // @@protoc_insertion_point(generalized_merge_from_cast_success:elegram.WrappedMessage)
          MergeFrom(*source);
      }
  }

  void WrappedMessage::MergeFrom(const WrappedMessage &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:elegram.WrappedMessage)
      if (GOOGLE_PREDICT_FALSE(&from == this)) {
          ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
      }
      switch (from.msg_case()) {
          case kResponse: {
              mutable_response()->::elegram::Response::MergeFrom(from.response());
              break;
          }
          case kRequest: {
              mutable_request()->::elegram::Request::MergeFrom(from.request());
              break;
          }
          case MSG_NOT_SET: {
              break;
          }
      }
  }

  void WrappedMessage::CopyFrom(const ::google::protobuf::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:elegram.WrappedMessage)
      if (&from == this) return;
      Clear();
      MergeFrom(from);
  }

  void WrappedMessage::CopyFrom(const WrappedMessage &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:elegram.WrappedMessage)
      if (&from == this) return;
      Clear();
      MergeFrom(from);
  }

  bool WrappedMessage::IsInitialized() const {

      return true;
  }

  void WrappedMessage::Swap(WrappedMessage *other) {
      if (other == this) return;
      InternalSwap(other);
  }
  void WrappedMessage::InternalSwap(WrappedMessage *other) {
      std::swap(msg_, other->msg_);
      std::swap(_oneof_case_[0], other->_oneof_case_[0]);
      _internal_metadata_.Swap(&other->_internal_metadata_);
      std::swap(_cached_size_, other->_cached_size_);
  }

  ::google::protobuf::Metadata WrappedMessage::GetMetadata() const {
      protobuf_AssignDescriptorsOnce();
      ::google::protobuf::Metadata metadata;
      metadata.descriptor = WrappedMessage_descriptor_;
      metadata.reflection = WrappedMessage_reflection_;
      return metadata;
  }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
                                                                                                                          // WrappedMessage

// optional .elegram.Response response = 1;
bool WrappedMessage::has_response() const {
  return msg_case() == kResponse;
}
void WrappedMessage::set_has_response() {
  _oneof_case_[0] = kResponse;
}
void WrappedMessage::clear_response() {
  if (has_response()) {
    delete msg_.response_;
    clear_has_msg();
  }
}
 const ::elegram::Response& WrappedMessage::response() const {
  // @@protoc_insertion_point(field_get:elegram.WrappedMessage.response)
  return has_response()
      ? *msg_.response_
      : ::elegram::Response::default_instance();
}
::elegram::Response* WrappedMessage::mutable_response() {
  if (!has_response()) {
    clear_msg();
    set_has_response();
    msg_.response_ = new ::elegram::Response;
  }
  // @@protoc_insertion_point(field_mutable:elegram.WrappedMessage.response)
  return msg_.response_;
}
::elegram::Response* WrappedMessage::release_response() {
  // @@protoc_insertion_point(field_release:elegram.WrappedMessage.response)
  if (has_response()) {
    clear_has_msg();
    ::elegram::Response* temp = msg_.response_;
    msg_.response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void WrappedMessage::set_allocated_response(::elegram::Response* response) {
  clear_msg();
  if (response) {
    set_has_response();
    msg_.response_ = response;
  }
  // @@protoc_insertion_point(field_set_allocated:elegram.WrappedMessage.response)
}

// optional .elegram.Request request = 2;
bool WrappedMessage::has_request() const {
  return msg_case() == kRequest;
}
void WrappedMessage::set_has_request() {
  _oneof_case_[0] = kRequest;
}
void WrappedMessage::clear_request() {
  if (has_request()) {
    delete msg_.request_;
    clear_has_msg();
  }
}
 const ::elegram::Request& WrappedMessage::request() const {
  // @@protoc_insertion_point(field_get:elegram.WrappedMessage.request)
  return has_request()
      ? *msg_.request_
      : ::elegram::Request::default_instance();
}
::elegram::Request* WrappedMessage::mutable_request() {
  if (!has_request()) {
    clear_msg();
    set_has_request();
    msg_.request_ = new ::elegram::Request;
  }
  // @@protoc_insertion_point(field_mutable:elegram.WrappedMessage.request)
  return msg_.request_;
}
::elegram::Request* WrappedMessage::release_request() {
  // @@protoc_insertion_point(field_release:elegram.WrappedMessage.request)
  if (has_request()) {
    clear_has_msg();
    ::elegram::Request* temp = msg_.request_;
    msg_.request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void WrappedMessage::set_allocated_request(::elegram::Request* request) {
  clear_msg();
  if (request) {
    set_has_request();
    msg_.request_ = request;
  }
  // @@protoc_insertion_point(field_set_allocated:elegram.WrappedMessage.request)
}

bool WrappedMessage::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
void WrappedMessage::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
WrappedMessage::MsgCase WrappedMessage::msg_case() const {
  return WrappedMessage::MsgCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
  const int LengthPrefix::kLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

  LengthPrefix::LengthPrefix()
      : ::google::protobuf::Message(), _internal_metadata_(NULL) {
      SharedCtor();
      // @@protoc_insertion_point(constructor:elegram.LengthPrefix)
  }

  void LengthPrefix::InitAsDefaultInstance() {
      _is_default_instance_ = true;
  }

  LengthPrefix::LengthPrefix(const LengthPrefix &from)
      : ::google::protobuf::Message(),
        _internal_metadata_(NULL) {
      SharedCtor();
      MergeFrom(from);
      // @@protoc_insertion_point(copy_constructor:elegram.LengthPrefix)
  }

  void LengthPrefix::SharedCtor() {
      _is_default_instance_ = false;
      _cached_size_ = 0;
      length_ = GOOGLE_ULONGLONG(0);
  }

  LengthPrefix::~LengthPrefix() {
      // @@protoc_insertion_point(destructor:elegram.LengthPrefix)
      SharedDtor();
  }

  void LengthPrefix::SharedDtor() {
      if (this != default_instance_) {
      }
  }

  void LengthPrefix::SetCachedSize(int size) const {
      GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
      _cached_size_ = size;
      GOOGLE_SAFE_CONCURRENT_WRITES_END();
  }
  const ::google::protobuf::Descriptor *LengthPrefix::descriptor() {
      protobuf_AssignDescriptorsOnce();
      return LengthPrefix_descriptor_;
  }

  const LengthPrefix &LengthPrefix::default_instance() {
      if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
      return *default_instance_;
  }

  LengthPrefix *LengthPrefix::default_instance_ = NULL;

  LengthPrefix *LengthPrefix::New(::google::protobuf::Arena *arena) const {
      LengthPrefix *n = new LengthPrefix;
      if (arena != NULL) {
          arena->Own(n);
      }
      return n;
  }

  void LengthPrefix::Clear() {
// @@protoc_insertion_point(message_clear_start:elegram.LengthPrefix)
      length_ = GOOGLE_ULONGLONG(0);
  }

  bool LengthPrefix::MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
      ::google::protobuf::uint32 tag;
      // @@protoc_insertion_point(parse_start:elegram.LengthPrefix)
      for (;;) {
          ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
          tag = p.first;
          if (!p.second) goto handle_unusual;
          switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
              // optional fixed64 length = 1;
              case 1: {
                  if (tag == 9) {
                      DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                          ::google::protobuf::uint64,
                          ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                          input, &length_)));

                  } else {
                      goto handle_unusual;
                  }
                  if (input->ExpectAtEnd()) goto success;
                  break;
              }

              default: {
                    handle_unusual:
                  if (tag == 0 ||
                      ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                          ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                      goto success;
                  }
                  DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                  break;
              }
          }
      }
        success:
      // @@protoc_insertion_point(parse_success:elegram.LengthPrefix)
      return true;
        failure:
      // @@protoc_insertion_point(parse_failure:elegram.LengthPrefix)
      return false;
#undef DO_
  }

  void LengthPrefix::SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream *output) const {
      // @@protoc_insertion_point(serialize_start:elegram.LengthPrefix)
      // optional fixed64 length = 1;
      if (this->length() != 0) {
          ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->length(), output);
      }

      // @@protoc_insertion_point(serialize_end:elegram.LengthPrefix)
  }

  ::google::protobuf::uint8 *LengthPrefix::InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8 *target) const {
      // @@protoc_insertion_point(serialize_to_array_start:elegram.LengthPrefix)
      // optional fixed64 length = 1;
      if (this->length() != 0) {
          target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1,
                                                                                     this->length(),
                                                                                     target);
      }

      // @@protoc_insertion_point(serialize_to_array_end:elegram.LengthPrefix)
      return target;
  }

  int LengthPrefix::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:elegram.LengthPrefix)
      int total_size = 0;

      // optional fixed64 length = 1;
      if (this->length() != 0) {
          total_size += 1 + 8;
      }

      GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
      _cached_size_ = total_size;
      GOOGLE_SAFE_CONCURRENT_WRITES_END();
      return total_size;
  }

  void LengthPrefix::MergeFrom(const ::google::protobuf::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:elegram.LengthPrefix)
      if (GOOGLE_PREDICT_FALSE(&from == this)) {
          ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
      }
      const LengthPrefix *source =
          ::google::protobuf::internal::DynamicCastToGenerated<const LengthPrefix>(
              &from);
      if (source == NULL) {
          // @@protoc_insertion_point(generalized_merge_from_cast_fail:elegram.LengthPrefix)
          ::google::protobuf::internal::ReflectionOps::Merge(from, this);
      } else {
          // @@protoc_insertion_point(generalized_merge_from_cast_success:elegram.LengthPrefix)
          MergeFrom(*source);
      }
  }

  void LengthPrefix::MergeFrom(const LengthPrefix &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:elegram.LengthPrefix)
      if (GOOGLE_PREDICT_FALSE(&from == this)) {
          ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
      }
      if (from.length() != 0) {
          set_length(from.length());
      }
  }

  void LengthPrefix::CopyFrom(const ::google::protobuf::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:elegram.LengthPrefix)
      if (&from == this) return;
      Clear();
      MergeFrom(from);
  }

  void LengthPrefix::CopyFrom(const LengthPrefix &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:elegram.LengthPrefix)
      if (&from == this) return;
      Clear();
      MergeFrom(from);
  }

  bool LengthPrefix::IsInitialized() const {

      return true;
  }

  void LengthPrefix::Swap(LengthPrefix *other) {
      if (other == this) return;
      InternalSwap(other);
  }
  void LengthPrefix::InternalSwap(LengthPrefix *other) {
      std::swap(length_, other->length_);
      _internal_metadata_.Swap(&other->_internal_metadata_);
      std::swap(_cached_size_, other->_cached_size_);
  }

  ::google::protobuf::Metadata LengthPrefix::GetMetadata() const {
      protobuf_AssignDescriptorsOnce();
      ::google::protobuf::Metadata metadata;
      metadata.descriptor = LengthPrefix_descriptor_;
      metadata.reflection = LengthPrefix_reflection_;
      return metadata;
  }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
                                                                                                                          // LengthPrefix

// optional fixed64 length = 1;
void LengthPrefix::clear_length() {
  length_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 LengthPrefix::length() const {
  // @@protoc_insertion_point(field_get:elegram.LengthPrefix.length)
  return length_;
}
 void LengthPrefix::set_length(::google::protobuf::uint64 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:elegram.LengthPrefix.length)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace elegram

// @@protoc_insertion_point(global_scope)
